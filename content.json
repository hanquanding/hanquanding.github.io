{"meta":{"title":"Hexo","subtitle":"","description":"","author":"hqd8080","url":"https://hqd8080.github.io","root":"/"},"pages":[{"title":"关于","date":"2021-10-08T02:11:21.077Z","updated":"2021-10-08T02:11:21.077Z","comments":false,"path":"about/index.html","permalink":"https://hqd8080.github.io/about/index.html","excerpt":"","text":"12345678910111213141516171819&#123; &quot;name&quot;: &quot;hqd&quot;, &quot;profession&quot;: &quot;backend developer&quot;, &quot;experience&quot;: &quot;9年&quot;, &quot;address&quot;: &quot;上海长宁&quot;, &quot;email&quot;: &quot;hanquanding@163.com&quot;, &quot;description&quot;: &quot;总有一些事情需要坚持!&quot;, &quot;skills&quot;: [ [ &quot;Golang&quot;, &quot;MySQL&quot;, &quot;Redis&quot;, &quot;MongoDB&quot; ], [ &quot;Gin&quot;, &quot;Beego&quot;, &quot;gRPC&quot;, &quot;Microservice&quot; ], [ &quot;WebSocket&quot;, &quot;XML&quot;, &quot;JSON&quot;, &quot;ProtoBuf&quot; ], [ &quot;Docker&quot;, &quot;Docker-composer&quot;, &quot;Kubernetes&quot; ], [ &quot;Nsq&quot;, &quot;RabbitMQ&quot; ], [ &quot;Etcd&quot;, &quot;Go-micro/Go-kit&quot; ], [ &quot;Linux&quot;, &quot;Git&quot; ], [ &quot;Ethereum&quot;, &quot;Hyperledger Fabric&quot;, &quot;EOS&quot;] ]&#125; 计算机软件工程专业；9年多互联网开发经验；5年多Golang使用经验； 对IT领域的软件开发和设计工作有浓厚兴趣，喜欢新技术，关注新技术发展；"},{"title":"标签","date":"2021-08-24T04:39:40.835Z","updated":"2021-08-24T04:39:40.835Z","comments":false,"path":"tags/index.html","permalink":"https://hqd8080.github.io/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-08-24T04:38:09.396Z","updated":"2021-08-21T14:55:23.527Z","comments":false,"path":"categories/index.html","permalink":"https://hqd8080.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Go语言统一接口响应格式","slug":"golang/go-response","date":"2022-03-28T02:10:10.000Z","updated":"2022-03-29T01:57:17.457Z","comments":true,"path":"2022/03/28/golang/go-response/","link":"","permalink":"https://hqd8080.github.io/2022/03/28/golang/go-response/","excerpt":"","text":"自己封装统一api接口响应格式，使用Gin框架的项目可直接使用1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071/** * @Author: hqd8080 * @Description: response,响应处理 * @Date: 2022-03-28 10:53 */package respimport ( &quot;go-vueadmin/pkg/errcode&quot; &quot;github.com/gin-gonic/gin&quot;)// Response 统一格式返回type Response struct &#123; Code int `json:&quot;code&quot;` Msg string `json:&quot;msg&quot;` Data interface&#123;&#125; `json:&quot;data&quot;`&#125;// PaginationParam 分页参数type PaginationParam struct &#123; List interface&#123;&#125; `json:&quot;list&quot;` Count int64 `json:&quot;count&quot;` PageIndex int `json:&quot;page_index&quot;` PageSize int `json:&quot;page_size&quot;`&#125;// PageResponse 分页统一格式type PageResponse struct &#123; Code int `json:&quot;code&quot;` Msg string `json:&quot;msg&quot;` Data PaginationParam `json:&quot;data&quot;`&#125;// Correct 正常返回数据,无分页func Correct(c *gin.Context, httpCode int, errCode int, data interface&#123;&#125;) &#123; response := &amp;Response&#123; Code: errCode, Msg: errcode.GetErrorMsg(errCode), Data: data, &#125; c.JSON(httpCode, response)&#125;// CorrectOK 正常返回分页数据func CorrectOK(c *gin.Context, httpCode int, errCode int, data interface&#123;&#125;, count int64, pageIndex int, pageSize int) &#123; pagination := PaginationParam&#123; List: data, Count: count, PageIndex: pageIndex, PageSize: pageSize, &#125; response := &amp;PageResponse&#123; Code: errCode, Msg: errcode.GetErrorMsg(errCode), Data: pagination, &#125; c.JSON(httpCode, response)&#125;// ErrorCode 可以定制返回错误码，错误信息func ErrorCode(c *gin.Context, httpCode int, errCode int) &#123; response := &amp;Response&#123; Code: errCode, Msg: errcode.GetErrorMsg(errCode), Data: nil, &#125; c.JSON(httpCode, response)&#125; 公共错误码标准化定义/pkg/errcode/errcode.go/pkg/errcode/errmsg.go 12345678910111213141516171819202122/** * @Author: hqd8080 * @Description: errcode,公共错误码标准化 * @Date: 2022-03-28 09:43 */package errcodeconst ( ErrCodeSuccess = 2000 // 公共错误码、成功 ErrCodeError = 5000 // 公共错误码、服务端错误 ErrCodeInvalidParam = 4000 // 公共错误码、请求参数错误 // 轮播图模块 ErrBannerList = 10000 ErrBannerExist = 10001 ErrBannerNotFound = 10002 ErrBannerCreate = 10003 ErrBannerUpdate = 10004 ErrBannerUpdateStatus = 10005 ErrBannerDelete = 10006) 123456789101112131415161718192021222324252627282930/** * @Author: hqd8080 * @Description: errmsg,公共错误码标准化 * @Date: 2022-03-28 10:07 */package errcodevar ErrorMsg = map[int]string&#123; ErrCodeSuccess: &quot;ok&quot;, ErrCodeError: &quot;fail&quot;, ErrCodeInvalidParam: &quot;请求参数错误！&quot;, // 轮播图模块 ErrBannerList: &quot;获取轮播图列表失败！&quot;, ErrBannerExist: &quot;轮播图已经存在！&quot;, ErrBannerNotFound: &quot;轮播图不存在！&quot;, ErrBannerCreate: &quot;添加轮播图失败！&quot;, ErrBannerUpdate: &quot;更新轮播图失败！&quot;, ErrBannerUpdateStatus: &quot;修改轮播图状态失败！&quot;, ErrBannerDelete: &quot;删除轮播图失败！&quot;,&#125;func GetErrorMsg(code int) string &#123; msg, ok := ErrorMsg[code] if ok &#123; return msg &#125; return ErrorMsg[ErrCodeError]&#125; 使用123456789101112131415161718192021222324252627package adminimport ( &quot;go-vueadmin/models&quot; &quot;go-vueadmin/pkg/errcode&quot; &quot;go-vueadmin/pkg/resp&quot; &quot;go-vueadmin/service&quot; &quot;go-vueadmin/util&quot; &quot;net/http&quot; &quot;github.com/gin-gonic/gin&quot;)type BannerImageController struct &#123; BaseController&#125;func (b BannerImageController) GetBannerImageList(c *gin.Context) &#123; bannerService := service.NewBannerImageService() pageIndex := bannerService.GetPageIndex(c) pageSize := bannerService.GetPageSize(c) list, count, err := bannerService.BannerList(c, pageIndex, pageSize) if err != nil &#123; resp.ErrorCode(c, http.StatusOK, errcode.ErrBannerList) return &#125; resp.CorrectOK(c, http.StatusOK, errcode.ErrCodeSuccess, list, count, pageIndex, pageSize)&#125;","categories":[{"name":"Golang","slug":"Golang","permalink":"https://hqd8080.github.io/categories/Golang/"}],"tags":[{"name":"golang","slug":"golang","permalink":"https://hqd8080.github.io/tags/golang/"}]},{"title":"GORM 2.0使用教程","slug":"golang/go-gorm2","date":"2022-03-21T02:54:40.000Z","updated":"2022-03-21T07:07:06.827Z","comments":true,"path":"2022/03/21/golang/go-gorm2/","link":"","permalink":"https://hqd8080.github.io/2022/03/21/golang/go-gorm2/","excerpt":"","text":"GORM 2.0使用教程GORM1.X用过有一段时间了，感觉Go生态MySQL的ORM还是不太成熟的，有一些特性使用起来还是觉得不太顺手，GORM算是比较好用的了，目前使用的人也比较多 这是main.go项目初始化1234567891011121314func init() &#123; if err := initialize.InitConfig(); err != nil &#123; panic(err) &#125; if err := initialize.InitLogger(); err != nil &#123; panic(err) &#125; if err := initialize.InitDB(); err != nil &#123; panic(err) &#125; if err := initialize.InitRedis(); err != nil &#123; panic(err) &#125;&#125; 这是GORM初始化的代码，注意GORM 2.0，Tag是2.0,实际上目前的版本还是1.23.x的版本12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273/** * @Author: hqd8080 * @Description: mysql * @Date: 2022-03-21 09:30 */package initializeimport ( &quot;fmt&quot; &quot;log&quot; &quot;os&quot; &quot;time&quot; &quot;gorm.io/driver/mysql&quot; &quot;gorm.io/gorm&quot; &quot;gorm.io/gorm/logger&quot; &quot;gorm.io/gorm/schema&quot;)var DB *gorm.DBfunc InitDB() error &#123; var err error dsn := fmt.Sprintf(&quot;%s:%s@tcp(%s:%d)/%s?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;, DatabaseConfig.Username, DatabaseConfig.Password, DatabaseConfig.Host, DatabaseConfig.Port, DatabaseConfig.Name, ) config := mysql.New(mysql.Config&#123; DriverName: &quot;mysql&quot;, // mysql DSN: dsn, // dsn SkipInitializeWithVersion: false, // 根据版本自动配置 DefaultStringSize: 256, // 设置string类型字段的默认长度 &#125;) logger := logger.New(log.New(os.Stdout, &quot;\\r\\n&quot;, log.LstdFlags), logger.Config&#123; SlowThreshold: time.Second * 1, // 慢SQL阈值 Colorful: true, // 开启彩色打印 IgnoreRecordNotFoundError: false, // 忽略未找到记录错误 LogLevel: logger.Info, // 设置日志级别 &#125;, ) opts := &amp;gorm.Config&#123; DisableForeignKeyConstraintWhenMigrating: true, // 迁移时禁用外键约束 PrepareStmt: true, Logger: logger, // 日志配置 NamingStrategy: schema.NamingStrategy&#123; TablePrefix: &quot;t_&quot;, // 设置表前缀 SingularTable: true, // 使用单数表名 NameReplacer: nil, NoLowerCase: false, &#125;, &#125; db, err := gorm.Open(config, opts) if err != nil &#123; return fmt.Errorf(&quot;connection to db err:%v&quot;, err) &#125; sqlDB, err := db.DB() if err != nil &#123; return fmt.Errorf(&quot;get db conn err:%v&quot;, err) &#125; sqlDB.SetMaxOpenConns(int(DatabaseConfig.MaxOpenConn)) // 打开数据库连接的最大数量 sqlDB.SetConnMaxIdleTime(time.Hour) // sqlDB.SetMaxIdleConns(int(DatabaseConfig.MaxIdleConn)) // 空闲连接池中连接的最大数量 sqlDB.SetConnMaxLifetime(time.Hour) // 连接可复用的最大时间 DB = db log.Println(&quot;init db connection success&quot;) return err&#125;","categories":[{"name":"Golang","slug":"Golang","permalink":"https://hqd8080.github.io/categories/Golang/"}],"tags":[{"name":"golang","slug":"golang","permalink":"https://hqd8080.github.io/tags/golang/"},{"name":"GORM","slug":"GORM","permalink":"https://hqd8080.github.io/tags/GORM/"}]},{"title":"Docker安装Redis并配置密码详细教程","slug":"docker/docker-install-redis","date":"2022-02-17T03:37:28.000Z","updated":"2022-03-31T03:23:07.501Z","comments":true,"path":"2022/02/17/docker/docker-install-redis/","link":"","permalink":"https://hqd8080.github.io/2022/02/17/docker/docker-install-redis/","excerpt":"","text":"Docker安装Redis并配置密码详细教程 执行以下命令，查找docker官方提供的最新的redis镜像：1docker search redis --filter &quot;is-official=true&quot; 将官方Redis镜像拉取到本地1docker pull redis 执行以下命令，根据Redis镜像生成本地容器1docker run --name myredis -p 6379:6379 -d --restart=always redis:latest redis-server --appendonly yes --requirepass &quot;123456&quot; -d 设置docker容器在后台运行-p 6379:6379 设置端口映射，前者为本地端口，后者为docker容器端口-v d:/redisdata:/data 将容器中/data目录映射到本地d:\\redisdata目录,作为redis数据持久化的存储目录redis-server –appendonly yes 启用aof持久化方式 执行以下命令，根据Redis镜像生成本地容器,添加目录映射1docker run --name myredis redis:latest -d -p 6379:6379 -v d:\\redisdata:/data redis-server --appendonly yes --requirepass &quot;123456&quot; 查看镜像1docker ps","categories":[{"name":"Docker","slug":"Docker","permalink":"https://hqd8080.github.io/categories/Docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://hqd8080.github.io/tags/docker/"},{"name":"redis","slug":"redis","permalink":"https://hqd8080.github.io/tags/redis/"}]},{"title":"Nginx配置HTTPS详细教程","slug":"nginx/nginx-ssl","date":"2022-02-17T02:37:28.000Z","updated":"2022-02-17T03:18:36.182Z","comments":true,"path":"2022/02/17/nginx/nginx-ssl/","link":"","permalink":"https://hqd8080.github.io/2022/02/17/nginx/nginx-ssl/","excerpt":"","text":"Nginx配置HTTPS详细教程 前置条件：在配置https之前请确保下面的步骤已经完成 服务器已经安装nginx并且通过http可以正常访问 拥有ssl证书，没有的可以去阿里购买或者免费申请一年 ，如果以上条件都满足了，接下来开始配置https 第一步：Nginx的ssl模块安装在配置ssl证书之前，要确保你的nginx已经安装了ssl模块，一般情况下自己安装的nginx都是不会存在ssl模块的这里先检查下自己是否存在ssl模块：进入到你的nginx安装目录下面，我的目录是在（/usr/local/nginx），如果你的nginx安装步骤和上面的文章一致的话，那你的目录和我应该是一致的进入到目录的sbin目录下，输入: 12# 注意这里是大写的V，小写的只显示版本号nginx -V 如果出现 (configure arguments: --with-http_ssl_module), 则已安装（下面的步骤可以跳过，直接进行ssl配置步骤) 一般情况下都是不存在ssl模块的，接下来进入到你的解压缩后的nginx目录，注意这里不是nginx安装目录，是解压缩后的目录，我的是在（/usr/local/src/nginx），进入目录后，输入： 1./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module 接下来执行: 12make# 切记不要执行make install，否则会重新安装nginx 上述操作执行完成以后，你的目录下会出现objs文件夹，文件夹内存在nginx文件 接下来使用新的nginx文件替换掉之前安装目录sbin下的nginx，注意这里的替换的时候可以先将之前的文件备份下，停掉nginx服务 1234nginx -s stop # 停止nginx服务# 替换之前的nginxcp /usr/local/src/nginx/objs/nginx /usr/local/nginx/sbin 成功之后，进入到nginx安装目录下，查看ssl信息是否编译成功 123# 注意这里是大写的V，小写的只显示版本号nginx -V # 可以看到这里出现了configure arguments: --with-http_ssl_module证明已经安装成功 提示：这里替换后在执行 -V命令如果提示权限不足，先给这个nginx文件提升下权限 第二步：配置ssl证书解压缩下载好的证书（证书一般是pem文件和key文件，这里名字可以随便改） 将下载好的证书上传到服务器，我将证书放在了/data/web/目录下的ssl文件夹 12# 创建ssl文件夹mkdir -p /data/web/ssl 第三步：进行nginx.conf配置进入nginx.conf文件下 123cd /usr/locla/nginx/conf# 修改nginx.conf文件vim nginx.conf 打开之后文件内容如图: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117user www;worker_processes 1;#error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info;#pid logs/nginx.pid;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; #log_format main &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27; # &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27; # &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; server &#123; listen 80; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location / &#123; root html; index index.html index.htm; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \\.php$ &#123; # proxy_pass http://127.0.0.1; #&#125; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ \\.php$ &#123; # root html; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; # include fastcgi_params; #&#125; # deny access to .htaccess files, if Apache&#x27;s document root # concurs with nginx&#x27;s one # #location ~ /\\.ht &#123; # deny all; #&#125; &#125; # another virtual host using mix of IP-, name-, and port-based configuration # #server &#123; # listen 8000; # listen somename:8080; # server_name somename alias another.alias; # location / &#123; # root html; # index index.html index.htm; # &#125; #&#125; # HTTPS server # #server &#123; # listen 443 ssl; # server_name localhost; # ssl_certificate cert.pem; # ssl_certificate_key cert.key; # ssl_session_cache shared:SSL:1m; # ssl_session_timeout 5m; # ssl_ciphers HIGH:!aNULL:!MD5; # ssl_prefer_server_ciphers on; # location / &#123; # root html; # index index.html index.htm; # &#125; #&#125; include servers/*;&#125; 可以将没用的东西都删除掉，删除的时候注意，括号要对应起来 进入servers/website.conf然后进行配置: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647server &#123; listen 443 ssl; server_name hqd8080.me; ssl on; ssl_certificate /data/web/ssl/hqd8080.me.pem; ssl_certificate_key /data/web/ssl/hqd8080.me.key; ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; root /data/web/public; access_log /data/web/logs/hqd8080.me.access.log; error_log /data/web/logs/hqd8080.me.error.log; client_max_body_size 10m; location / &#123; index index.html index.htm; &#125; location ~ ^/(uploads|assets)/.*\\.(php|php5|jsp)$ &#123; deny all; &#125; # 配置后台服务api接口服务 代理到8080端口 location ~ ^/dev/ &#123; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; rewrite ^/dev/(.*)$ /$1 break; proxy_pass http://127.0.0.1:8080; &#125; error_page 404 /404.html; error_page 403 /403.html;&#125;server &#123; listen 80; server_name hqd8080.me; #将请求转成https rewrite ^(.*)$ https://$host$1 permanent;&#125; 注意：这里需要在安全组中开放443端口 第四步：重启nginxok，如果上述步骤都完成了，没有问题，接下来只需要重启nginx服务即可 进入sbin目录下，输入: 123./nginx -s reload./nginx -s stop./nginx 完成","categories":[{"name":"Nginx","slug":"Nginx","permalink":"https://hqd8080.github.io/categories/Nginx/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"https://hqd8080.github.io/tags/Nginx/"}]},{"title":"gRPC使用实例","slug":"grpc/grpc-demo","date":"2021-11-29T07:30:30.000Z","updated":"2022-03-29T05:44:07.402Z","comments":true,"path":"2021/11/29/grpc/grpc-demo/","link":"","permalink":"https://hqd8080.github.io/2021/11/29/grpc/grpc-demo/","excerpt":"","text":"首先使用gRPC先定义protobuf协议文件hello.proto 12345678910111213141516syntax = &quot;proto3&quot;;package services;message HelloRequest &#123; string name = 1;&#125;message HelloReply &#123; string message = 2;&#125;service HelloService &#123; rpc SayHello(HelloRequest) returns (HelloReply); rpc Streaming(stream HelloRequest) returns (stream HelloReply);&#125; user.proto 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130syntax = &quot;proto3&quot;;package services;// 测试官方类型import &quot;google/protobuf/timestamp.proto&quot;;import &quot;google/protobuf/empty.proto&quot;;import &quot;google/protobuf/any.proto&quot;;//import &quot;common.proto&quot;;// 测试枚举类型enum LoginStatus &#123; success = 0; // 登录成功 failed = 1; // 登录失败 error = 2; // 错误&#125;// 用户登录请求message UserLoginRequest &#123; int64 user_id = 1; // 用户编号 string user_name = 2; // 用户名 string user_nickname = 3; // 用户昵称 string user_country = 4; // 用户国籍 int32 user_gender = 5; // 用户性别 double user_credits = 6; // 用户积分 bool is_admin = 7; // 是否是管理员 bytes auth_code = 8; // 授权码 float user_balance = 9; // 用户余额 // 用户爱好 enum Hobby &#123; music = 0; // 音乐 basketball = 1; // 篮球 tour = 2; // 旅游 &#125; Hobby user_hobby = 10; // 用户爱好 repeated int32 lucky_numbers = 11; // 幸运数字 map&lt;string, string&gt; user_email = 12; // 用户email map&lt;string, int32&gt; user_weight = 13; // 用户体重 map&lt;string, PhoneNumber&gt; user_num = 14; // 测试map LoginStatus login_status = 15; // 登录状态 // 手机类型枚举 enum PhoneType &#123; mobile = 0; // 移动 home = 1; // 家庭 work = 2; // 办公室 &#125; // 手机号码类型 message PhoneNumber &#123; string phone_number = 1; // 手机号码 PhoneType phone_type = 2; // 手机号码类型 &#125; repeated PhoneNumber phones = 16; // 手机号码 google.protobuf.Timestamp last_update_date = 17; // 最后更新日期&#125;// 用户登录响应message UserLoginResponse &#123; int64 user_id = 1; // 用户编号 string user_name = 2; // 用户名 string user_pwd = 3; // 用户密码 int32 user_gender = 5; // 用户性别 double user_credits = 6; // 用户积分 bool is_admin = 7; // 是否是管理员 bytes auth_code = 8; // 授权码 float user_balance = 9; // 用户余额 // 用户爱好 enum Hobby &#123; music = 0; // 音乐 basketball = 1; // 篮球 tour = 2; // 旅游 &#125; Hobby user_hobby = 10; // 用户爱好 // 手机类型 enum PhoneType &#123; mobile = 0; // 移动 home = 1; // 家庭 work = 2; // 办公室 &#125; // 手机号码类型 message PhoneNumber &#123; string phone_number = 1; // 手机号码 PhoneType phone_type = 2; // 手机号码类型 &#125; repeated PhoneNumber phones = 11; // 手机号码 google.protobuf.Timestamp last_update_date = 12; // 最后更新日期 map&lt;string, PhoneNumber&gt; user_num = 13; // 测试map repeated int32 lucky_numbers = 14; // 幸运数字 map&lt;string, string&gt; user_email = 15; // 用户email map&lt;string, int32&gt; user_weight = 16; // 用户体重 LoginStatus login_status = 17; // 登录状态&#125;message TestRequest &#123; string name = 1; repeated Extension extensions = 2;&#125;message TestResponse &#123; string msg = 1; string name = 2; repeated Extension extensions = 3;&#125;message Extension &#123; uint64 id = 1; google.protobuf.Any data = 2; //测试官方any类型&#125;// user serviceservice UserService &#123; rpc Login(UserLoginRequest) returns (UserLoginResponse); rpc LoginStreaming(stream UserLoginRequest) returns (stream UserLoginResponse);&#125;// test serviceservice TestService &#123; rpc Test(TestRequest) returns (TestResponse); rpc Ping (google.protobuf.Empty) returns (google.protobuf.Empty);&#125; common.proto 123456789syntax = &quot;proto3&quot;;package services;enum LoginStatus &#123; success = 0; // 登录成功 failed = 1; // 登录失败 error = 3; // 错误&#125; 根据protobuf文件生成pb文件generate.sh 12#!/bin/bashprotoc -I. --go_out=plugins=grpc:../services/pb *.proto 实现接口协议services/hello.go 12345678910111213141516171819202122232425262728293031323334package servicesimport ( &quot;context&quot; pb &quot;tests/grpc/services/pb&quot; &quot;io&quot;)type HelloService struct&#123;&#125;func (h *HelloService) SayHello(ctx context.Context, request *pb.HelloRequest) (*pb.HelloReply, error) &#123; reply := &amp;pb.HelloReply&#123;Message: &quot;hello &quot; + request.GetName()&#125; return reply, nil&#125;func (h *HelloService) Streaming(stream pb.HelloService_StreamingServer) error &#123; for &#123; req, err := stream.Recv() if err != nil &#123; if err == io.EOF &#123; return nil &#125; return err &#125; reply := &amp;pb.HelloReply&#123;Message: &quot;hello &quot; + req.GetName()&#125; err = stream.Send(reply) if err != nil &#123; return err &#125; return nil &#125;&#125; services/user.go 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111package servicesimport ( &quot;context&quot; pb &quot;tests/grpc/services/pb&quot; &quot;io&quot;)type UserService struct&#123;&#125;func (u *UserService) Login(ctx context.Context, request *pb.UserLoginRequest) (*pb.UserLoginResponse, error) &#123; var phones = []*pb.UserLoginResponse_PhoneNumber&#123; &amp;pb.UserLoginResponse_PhoneNumber&#123; PhoneNumber: &quot;返回手机号码:&quot; + request.GetPhones()[0].PhoneNumber, PhoneType: pb.UserLoginResponse_PhoneType(request.GetPhones()[0].PhoneType), &#125;, &#125; var userNum = map[string]*pb.UserLoginResponse_PhoneNumber&#123; &quot;phone_001&quot;: &amp;pb.UserLoginResponse_PhoneNumber&#123; PhoneNumber: &quot;001&quot;, PhoneType: pb.UserLoginResponse_mobile, &#125;, &quot;phone_002&quot;: &amp;pb.UserLoginResponse_PhoneNumber&#123; PhoneNumber: &quot;002&quot;, PhoneType: pb.UserLoginResponse_home, &#125;, &quot;phone_003&quot;: &amp;pb.UserLoginResponse_PhoneNumber&#123; PhoneNumber: &quot;003&quot;, PhoneType: pb.UserLoginResponse_work, &#125;, &#125; reply := &amp;pb.UserLoginResponse&#123; UserId: request.GetUserId(), UserName: &quot;获取用户名称：&quot; + request.GetUserName(), UserPwd: &quot;用户密码12345678900&quot;, UserGender: request.GetUserGender(), UserCredits: request.GetUserCredits(), IsAdmin: request.GetIsAdmin(), AuthCode: request.GetAuthCode(), UserBalance: request.GetUserBalance(), UserHobby: pb.UserLoginResponse_Hobby(request.GetUserHobby()), Phones: phones, LastUpdateDate: request.GetLastUpdateDate(), UserNum: userNum, LuckyNumbers: request.GetLuckyNumbers(), UserEmail: request.GetUserEmail(), UserWeight: request.GetUserWeight(), LoginStatus: request.GetLoginStatus(), &#125; return reply, nil&#125;// 双向流func (u *UserService) LoginStreaming(stream pb.UserService_LoginStreamingServer) error &#123; for &#123; req, err := stream.Recv() if err != nil &#123; if err == io.EOF &#123; return nil &#125; return err &#125; var phones = []*pb.UserLoginResponse_PhoneNumber&#123; &amp;pb.UserLoginResponse_PhoneNumber&#123; PhoneNumber: &quot;返回手机号码:&quot; + req.GetPhones()[0].PhoneNumber, PhoneType: pb.UserLoginResponse_PhoneType(req.GetPhones()[0].PhoneType), &#125;, &#125; var userNum = map[string]*pb.UserLoginResponse_PhoneNumber&#123; &quot;phone001&quot;: &amp;pb.UserLoginResponse_PhoneNumber&#123; PhoneNumber: &quot;1111111111&quot;, PhoneType: pb.UserLoginResponse_mobile, &#125;, &quot;phone002&quot;: &amp;pb.UserLoginResponse_PhoneNumber&#123; PhoneNumber: &quot;2222222222&quot;, PhoneType: pb.UserLoginResponse_home, &#125;, &quot;phone003&quot;: &amp;pb.UserLoginResponse_PhoneNumber&#123; PhoneNumber: &quot;3333333333&quot;, PhoneType: pb.UserLoginResponse_work, &#125;, &#125; reply := &amp;pb.UserLoginResponse&#123; UserId: req.GetUserId(), UserName: &quot;返回用户名称：&quot; + req.GetUserName(), UserPwd: &quot;用户密码111111111111&quot;, UserGender: req.GetUserGender(), UserCredits: req.GetUserCredits(), IsAdmin: req.GetIsAdmin(), AuthCode: req.GetAuthCode(), UserBalance: req.GetUserBalance(), UserHobby: pb.UserLoginResponse_Hobby(req.GetUserHobby()), Phones: phones, LastUpdateDate: req.GetLastUpdateDate(), UserNum: userNum, LuckyNumbers: req.GetLuckyNumbers(), UserEmail: req.GetUserEmail(), UserWeight: req.GetUserWeight(), LoginStatus: req.GetLoginStatus(), &#125; err = stream.Send(reply) if err != nil &#123; return err &#125; return nil &#125;&#125; services/test.go 1234567891011121314151617181920212223242526272829303132333435package servicesimport ( &quot;context&quot; pb &quot;tests/grpc/services/pb&quot; &quot;strconv&quot; &quot;github.com/golang/protobuf/ptypes/empty&quot; anypb &quot;google.golang.org/protobuf/types/known/anypb&quot;)type TestService struct&#123;&#125;func (t *TestService) Test(ctx context.Context, req *pb.TestRequest) (*pb.TestResponse, error) &#123; var extension = []*pb.Extension&#123; &amp;pb.Extension&#123; Id: req.GetExtensions()[0].Id, Data: req.GetExtensions()[0].GetData(), &#125;, &amp;pb.Extension&#123; Id: 100, Data: &amp;anypb.Any&#123;TypeUrl: &quot;test any type `type_url`&quot;&#125;, &#125;, &#125; reply := &amp;pb.TestResponse&#123; Msg: &quot;ok 200&quot;, Name: req.GetName() + &quot;:&quot; + strconv.FormatInt(int64(req.Extensions[0].Id), 10), Extensions: extension, &#125; return reply, nil&#125;func (t *TestService) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) &#123; return &amp;empty.Empty&#123;&#125;, nil&#125; 实现gRPC客户端client/client.gopackage mainimport ( &quot;context&quot; &quot;crypto/tls&quot; &quot;crypto/x509&quot; &quot;flag&quot; pb &quot;tests/grpc/services/pb&quot; &quot;io&quot; &quot;io/ioutil&quot; &quot;log&quot; &quot;time&quot; &quot;github.com/golang/protobuf/ptypes/empty&quot; &quot;github.com/golang/protobuf/ptypes/timestamp&quot; &quot;google.golang.org/grpc&quot; &quot;google.golang.org/grpc/credentials&quot; &quot;google.golang.org/protobuf/types/known/anypb&quot;)var ( address = flag.String(&quot;addr&quot;, &quot;localhost:8888&quot;, &quot;addr&quot;) name = flag.String(&quot;name&quot;, &quot;world&quot;, &quot;name&quot;))func main() &#123; flag.Parse() cert, err := tls.LoadX509KeyPair(&quot;cert/client.pem&quot;, &quot;cert/client.key&quot;) if err != nil &#123; log.Fatalf(&quot;load cert files failed,err:%v&quot;, err) &#125; certPool := x509.NewCertPool() ca, err := ioutil.ReadFile(&quot;cert/ca.pem&quot;) if err != nil &#123; log.Fatalf(&quot;read ca file failed,err:%v&quot;, err) &#125; if ok := certPool.AppendCertsFromPEM(ca); !ok &#123; log.Fatal(&quot;failed to append ca certs&quot;) &#125; creds := credentials.NewTLS(&amp;tls.Config&#123; Certificates: []tls.Certificate&#123;cert&#125;, // 客户端证书 ServerName: &quot;localhost&quot;, RootCAs: certPool, &#125;) //conn, err := grpc.Dial(*address, grpc.WithInsecure()) conn, err := grpc.Dial(*address, grpc.WithTransportCredentials(creds)) if err != nil &#123; log.Fatalf(&quot;failed to connect server,err:%v&quot;, err) &#125; defer conn.Close() // hello client helloClient := pb.NewHelloServiceClient(conn) sayHello(helloClient) // user client userClient := pb.NewUserServiceClient(conn) login(userClient) loginStreaming(userClient) // test client testClient := pb.NewTestServiceClient(conn) test(testClient) ping(testClient)&#125;func sayHello(client pb.HelloServiceClient) &#123; reply, err := client.SayHello(context.Background(), &amp;pb.HelloRequest&#123;Name: *name&#125;) if err != nil &#123; log.Fatal(err) &#125; log.Println(reply.GetMessage()) stream, err := client.Streaming(context.Background()) if err != nil &#123; log.Fatalf(&quot;failed to call:%v&quot;, err) &#125; go func() &#123; for &#123; err := stream.Send(&amp;pb.HelloRequest&#123;Name: *name&#125;) if err != nil &#123; log.Fatalf(&quot;failed to send,err:%v&quot;, err) break &#125; time.Sleep(time.Second) &#125; &#125;() for &#123; reply, err := stream.Recv() if err != nil &#123; if err == io.EOF &#123; break &#125; log.Fatalf(&quot;failed to recv,err:%v&quot;, err) break &#125; log.Println(reply.GetMessage()) &#125;&#125;func login(client pb.UserServiceClient) &#123; var userEmail = map[string]string&#123;&quot;email&quot;: &quot;test@qq.com&quot;&#125; var userWeight = map[string]int32&#123;&quot;weight&quot;: 170&#125; var userNum = map[string]*pb.UserLoginRequest_PhoneNumber&#123; &quot;001&quot;: &#123;PhoneNumber: &quot;001&quot;, PhoneType: pb.UserLoginRequest_mobile&#125;, &quot;002&quot;: &#123;PhoneNumber: &quot;002&quot;, PhoneType: pb.UserLoginRequest_home&#125;, &quot;003&quot;: &#123;PhoneNumber: &quot;003&quot;, PhoneType: pb.UserLoginRequest_work&#125;, &#125; var phones = []*pb.UserLoginRequest_PhoneNumber&#123; &#123;PhoneNumber: &quot;1111111&quot;, PhoneType: pb.UserLoginRequest_mobile&#125;, &#123;PhoneNumber: &quot;2222222&quot;, PhoneType: pb.UserLoginRequest_home&#125;, &#123;PhoneNumber: &quot;3333333&quot;, PhoneType: pb.UserLoginRequest_work&#125;, &#125; var lastUpdateDate = &amp;timestamp.Timestamp&#123; Seconds: time.Now().Unix(), Nanos: int32(999999999), &#125; request := &amp;pb.UserLoginRequest&#123; UserId: int64(100), UserName: &quot;aaaaa&quot;, UserNickname: &quot;用户昵称&quot;, UserCountry: &quot;china&quot;, UserGender: 1, UserCredits: 111.111, IsAdmin: true, AuthCode: []byte(&quot;abcdefg&quot;), UserBalance: 10000000.0000, UserHobby: pb.UserLoginRequest_music, LuckyNumbers: []int32&#123;2, 4, 6, 8, 10&#125;, UserEmail: userEmail, UserWeight: userWeight, UserNum: userNum, LoginStatus: pb.LoginStatus_success, Phones: phones, LastUpdateDate: lastUpdateDate, &#125; resp, err := client.Login(context.Background(), request) if err != nil &#123; log.Fatal(err) &#125; log.Println(resp)&#125;func loginStreaming(client pb.UserServiceClient) &#123; var userEmail = map[string]string&#123;&quot;email&quot;: &quot;test123@qq.com&quot;&#125; var userWeight = map[string]int32&#123;&quot;weight&quot;: 180&#125; var userNum = map[string]*pb.UserLoginRequest_PhoneNumber&#123; &quot;test001&quot;: &#123;PhoneNumber: &quot;001&quot;, PhoneType: pb.UserLoginRequest_mobile&#125;, &quot;test002&quot;: &#123;PhoneNumber: &quot;002&quot;, PhoneType: pb.UserLoginRequest_home&#125;, &quot;test003&quot;: &#123;PhoneNumber: &quot;003&quot;, PhoneType: pb.UserLoginRequest_work&#125;, &#125; var phones = []*pb.UserLoginRequest_PhoneNumber&#123; &#123;PhoneNumber: &quot;test-1111111&quot;, PhoneType: pb.UserLoginRequest_mobile&#125;, &#123;PhoneNumber: &quot;test-2222222&quot;, PhoneType: pb.UserLoginRequest_home&#125;, &#123;PhoneNumber: &quot;test-3333333&quot;, PhoneType: pb.UserLoginRequest_work&#125;, &#125; var lastUpdateDate = &amp;timestamp.Timestamp&#123; Seconds: time.Now().Unix(), Nanos: int32(999999999), &#125; login := &amp;pb.UserLoginRequest&#123; UserId: int64(101), UserName: &quot;bbbbbbb&quot;, UserNickname: &quot;用户昵称&quot;, UserCountry: &quot;china&quot;, UserGender: 2, UserCredits: 222.222, IsAdmin: true, AuthCode: []byte(&quot;xxxxx&quot;), UserBalance: 20000000.0000, UserHobby: pb.UserLoginRequest_tour, LuckyNumbers: []int32&#123;34, 55, 333, 33, 199&#125;, UserEmail: userEmail, UserWeight: userWeight, UserNum: userNum, LoginStatus: pb.LoginStatus_error, Phones: phones, LastUpdateDate: lastUpdateDate, &#125; stream, err := client.LoginStreaming(context.Background()) if err != nil &#123; log.Fatalf(&quot;failed to call:%v&quot;, err) &#125; go func() &#123; for &#123; err := stream.Send(login) if err != nil &#123; log.Fatalf(&quot;failed to send,err:%v&quot;, err) break &#125; time.Sleep(time.Second) &#125; &#125;() for &#123; reply, err := stream.Recv() if err != nil &#123; if err == io.EOF &#123; break &#125; log.Printf(&quot;failed to recv,err:%v&quot;, err) break &#125; log.Println(reply) &#125;&#125;func test(client pb.TestServiceClient) &#123; req := &amp;pb.TestRequest&#123; Name: &quot;test&quot;, Extensions: []*pb.Extension&#123; &amp;pb.Extension&#123;Id: 8888, Data: nil&#125;, &amp;pb.Extension&#123;Id: 9999, Data: &amp;anypb.Any&#123;TypeUrl: &quot;type url&quot;&#125;&#125;, &#125;, &#125; reply, err := client.Test(context.Background(), req) if err != nil &#123; log.Fatal(err) &#125; log.Println(reply)&#125;func ping(client pb.TestServiceClient) &#123; reply, err := client.Ping(context.Background(), &amp;empty.Empty&#123;&#125;) if err != nil &#123; log.Fatal(err) &#125; log.Printf(&quot;%v&quot;, reply)&#125; gRPC服务端server/server.go 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162package mainimport ( &quot;crypto/tls&quot; &quot;crypto/x509&quot; &quot;flag&quot; &quot;tests/grpc/services&quot; pb &quot;tests/grpc/services/pb&quot; &quot;io/ioutil&quot; &quot;log&quot; &quot;net&quot; &quot;google.golang.org/grpc&quot; &quot;google.golang.org/grpc/credentials&quot;)var ( serverPort = flag.String(&quot;port&quot;, &quot;:8888&quot;, &quot;port&quot;))func main() &#123; flag.Parse() cert, err := tls.LoadX509KeyPair(&quot;cert/server.pem&quot;, &quot;cert/server.key&quot;) if err != nil &#123; log.Fatalf(&quot;load cert files failed,err:%v&quot;, err) &#125; certPool := x509.NewCertPool() ca, err := ioutil.ReadFile(&quot;cert/ca.pem&quot;) if err != nil &#123; log.Fatalf(&quot;read ca file failed,err:%v&quot;, err) &#125; if ok := certPool.AppendCertsFromPEM(ca); !ok &#123; log.Fatal(&quot;failed to append certs&quot;) &#125; creds := credentials.NewTLS(&amp;tls.Config&#123; Certificates: []tls.Certificate&#123;cert&#125;, // 服务端证书 ClientAuth: tls.RequireAndVerifyClientCert, ClientCAs: certPool, &#125;) server := grpc.NewServer(grpc.Creds(creds)) pb.RegisterHelloServiceServer(server, new(services.HelloService)) pb.RegisterUserServiceServer(server, new(services.UserService)) pb.RegisterTestServiceServer(server, new(services.TestService)) l, err := net.Listen(&quot;tcp&quot;, *serverPort) if err != nil &#123; log.Fatalf(&quot;failed to listen,err:%v&quot;, err) &#125; log.Printf(&quot;server start at [%s]&quot;, *serverPort) err = server.Serve(l) if err != nil &#123; log.Fatal(err) &#125;&#125; gRPC使用实例查看目录结构： 1cd tests 查看目录层级： 1tree -L 1 1234567└── grpc ├── client ├── proto ├── server └── services5 directories, 0 files 1234567891011121314151617181920212223242526272829└── grpc ├── client │ ├── cert │ │ ├── ca.pem │ │ ├── client.key │ │ └── client.pem │ └── client.go ├── proto │ ├── common.proto │ ├── generate.sh │ ├── hello.proto │ └── user.proto ├── server │ ├── auth_server.go │ ├── cert │ │ ├── ca.pem │ │ ├── server.key │ │ └── server.pem │ └── server.go └── services ├── hello.go ├── pb │ ├── common.pb.go │ ├── hello.pb.go │ └── user.pb.go ├── test.go └── user.go8 directories, 19 files","categories":[{"name":"gRPC","slug":"gRPC","permalink":"https://hqd8080.github.io/categories/gRPC/"}],"tags":[{"name":"golang","slug":"golang","permalink":"https://hqd8080.github.io/tags/golang/"},{"name":"gRPC","slug":"gRPC","permalink":"https://hqd8080.github.io/tags/gRPC/"}]},{"title":"Linux进程维护shell脚本","slug":"linux/linux-process-start","date":"2021-11-29T06:30:28.000Z","updated":"2021-11-29T06:45:36.095Z","comments":true,"path":"2021/11/29/linux/linux-process-start/","link":"","permalink":"https://hqd8080.github.io/2021/11/29/linux/linux-process-start/","excerpt":"","text":"start.sh 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#!/bin/bashprocess_name=`pwd | xargs basename`usage() &#123; echo &quot;./start.sh [ start | stop | reload | status ]&quot;&#125;status() &#123; ps -ef | grep $process_name | grep -v grep&#125;start() &#123; echo &quot;start $process_name....&quot; nohup ./$process_name 2&gt;&amp;1 1&gt;/dev/null &amp; status&#125;stop() &#123; echo &quot;stop $process_name...&quot; ps -ef | grep $process_name | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27; |xargs kill -9 status&#125;reload() &#123; echo &quot;reload $process_name...&quot; ps -ef | grep $process_name |grep -v grep | awk &#x27;&#123;print $2&#125;&#x27; |xargs kill -HUP status&#125;case &quot;$1&quot; in start) start ;; stop) stop ;; reload) reload ;; status) status ;; *) usage ;;esac","categories":[{"name":"Linux","slug":"Linux","permalink":"https://hqd8080.github.io/categories/Linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hqd8080.github.io/tags/linux/"}]},{"title":"Linux使用tar压缩时排除某个目录或文件","slug":"linux/linux-tar-exclude","date":"2021-11-29T06:30:28.000Z","updated":"2021-12-02T02:14:13.377Z","comments":true,"path":"2021/11/29/linux/linux-tar-exclude/","link":"","permalink":"https://hqd8080.github.io/2021/11/29/linux/linux-tar-exclude/","excerpt":"","text":"例如：在/home/abc/目录下有4个子目录：abc01、abc02、abc03、abc04，现在想把/home/abc/目录下的abc01、abc02、abc03打包成abc.tar.gz，不打包abc04！ 操作如下： cd /home 1tar -zcvf abc.tar.gz --exclude=abc04 ./abc 打包成功，可以在/home目录下面看到abc.tar.gz文件了","categories":[{"name":"Linux","slug":"Linux","permalink":"https://hqd8080.github.io/categories/Linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hqd8080.github.io/tags/linux/"}]},{"title":"Linux服务器备份数据库shell脚本","slug":"linux/linux-db-backup","date":"2021-11-16T09:42:28.000Z","updated":"2021-11-25T03:09:51.229Z","comments":true,"path":"2021/11/16/linux/linux-db-backup/","link":"","permalink":"https://hqd8080.github.io/2021/11/16/linux/linux-db-backup/","excerpt":"","text":"data_backup.sh 123456789101112131415161718192021222324252627282930313233343536#!/bin/bashDIR=&quot;/usr/local/data/data_backup&quot;DATE=date +%Y%m%d%H%M%SDATE_DAY=date +%Y%m%decho $DATEDB_HOST=&quot;127.0.0.1&quot;DB_USER=&quot;root&quot;DB_PASS=&quot;dbpwd&quot;mkdir $&#123;DIR&#125;/$&#123;DATE_DAY&#125;cd $&#123;DIR&#125;/$&#123;DATE_DAY&#125;/usr/local/mysql/bin/mysqldump -h$&#123;DB_HOST&#125; -u$&#123;DB_USER&#125; -p$&#123;DB_PASS&#125; --databases dbname &gt;dbname-$&#123;DATE&#125;.sqlif [ $? -eq 0 ]thentar -zcf mydatabase-$&#123;DATE&#125;.sql.tgz dbname-$&#123;DATE&#125;.sqlelsesleep 20/usr/local/mysql/bin/mysqldump -h$&#123;DB_HOST&#125; -u$&#123;DB_USER&#125; -p$&#123;DB_PASS&#125; --databases dbname &gt;dbname-$&#123;DATE&#125;.sqlif [ $? -eq 0 ];thentar -zcf mydatabase-$&#123;DATE&#125;.sql.tgz dbname-$&#123;DATE&#125;.sqlfirm -rf dbname-$&#123;DATE&#125;.sql#find $DIR -type d -mtime +30 |xargs rm -rfDATE_STR=date +%Y%m%d%H%M%Secho $DATE &gt;&gt;$&#123;DIR&#125;/$&#123;DATE_DAY&#125;/mysql_dump$DATE_DAY.logecho $DATE_STR &gt;&gt;$&#123;DIR&#125;/$&#123;DATE_DAY&#125;/mysql_dump$DATE_DAY.log 12#设置脚本data_backup.sh有可执行的权限chmod +x ./data_backup.sh 12345crontab -e #添加计划任务0 23 * * * /usr/local/data/data_backup.shsystemctl start crond.service #设置cron开机启动 解决：mysqldump: [Warning] Using a password on the command line interface can be insecure.1234567vim /etc/my.cnf[mysqldump]host=127.0.0.1user=rootpassword=123456port=3306 修改完配置文件后,只需要执行mysqldump脚本就可以了;备份脚本中不需要涉及用户名密码相关信息","categories":[{"name":"Linux","slug":"Linux","permalink":"https://hqd8080.github.io/categories/Linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hqd8080.github.io/tags/linux/"},{"name":"MySQL","slug":"MySQL","permalink":"https://hqd8080.github.io/tags/MySQL/"}]},{"title":"Linux计划任务Crontab实例详解","slug":"linux/linux-crontab","date":"2021-11-15T01:40:28.000Z","updated":"2021-12-02T09:01:57.337Z","comments":true,"path":"2021/11/15/linux/linux-crontab/","link":"","permalink":"https://hqd8080.github.io/2021/11/15/linux/linux-crontab/","excerpt":"","text":"crontab是一个用于设置周期性被执行任务的工具，类似于Windows系统中的任务计划程序。 安装并检查crontab服务 检查crond工具是不是安装：crontab -l #任务列表 检查crond服务是否启动：service crond status #查看crontab状态 安装crontab yum install vixie-cron #安装 chkconfig crond on #设为开机启动，先要安装chkconfig（yum install chkconfig） service crond start #启动 service crond stop #停止 /etc/rc.d/init.d/crond restart #重启 /etc/rc.d/init.d/crond reload #不中断服务，重新载入配置 设置任务计划 /home/test.sh #要自动执行的脚本程序路径 chmod +x /home/test.sh #对脚本文件添加执行权限，否则不能执行 crontab -e #编辑配置文件，在最后一行添加内容 30 1 * * * root /home/test.sh #表示每天凌晨1点30分执行脚本 :wq! #保存退出 crontab文件的格式minute hour day month weekday username command minute：分，值为0-59 hour：小时，值为1-23 day：天，值为1-31 month：月，值为1-12 weekday：星期，值为0-6（0代表星期天，1代表星期一，以此类推） username：要执行程序的用户，一般设置为root command：要执行的程序路径（设置为绝对路径）例如：/home/test.sh crontab实例 每晚的21：30重启apache 130 21 * * * service httpd restart 每月的1，10，22日的4：45重启apache 145 4 1，10，22，* * service httpd restart 每月的1到10日的4：45重启apache 145 4 1-10 * * service httpd restart 每隔两分钟重启apache服务器 12*/2 * * * * service httpd restart1-59/2 * * * * service httpd restart 晚上11点到早上7点之间，每隔一小时重启apache 10 23-7/1 * * * service httpd restart 每天18：00至23：00之间每隔30分钟重启apache 120，30 18-23 * * * service httpd restart0-59/30 18-23 * * * service httpd restart 每周一到周五的11:41开始，每隔10分钟执行一次 12341,51 11 * * 1-5 root /home/test.sh1-59/10 12-23 * * 1-5 root /home/test.sh 在每天的10:31开始，每隔2小时重复一次 131 10-23/2 * * * root /home/test.sh 每天的10:30开始，每隔2小时重复一次 130 10-23/2 * * * root /home/test.sh 每周一到周五9:30 130 9 * * 1-5 root /home/test.sh 每周一到周五8:00，每周一到周五9:00 10 8,9 * * 1-5 root /home/test.sh 每周一到周五9:25到11:35之间、13:00到15:00之间，每隔10分钟运行一次 123456725,35,45,55 9 * * 1-5 root /home/test.sh5-59/10 10 * * 1-5 root /home/test.sh5,15,25,35 11 * * 1-5 root /home/test.sh*/10 13-15 * * 1-5 root /home/test.sh 每周一到周五8:30、8:50、9:30、10:00、10:30、11:00、11:30、13:30、14:00、14:30、5:00分别执行一次 12345678930,50 8 * * 1-5 root /home/test.sh30 9 * * 1-5 root /home/test.sh*/30 10-11 * * 1-5 root /home/test.sh30 13 * * 1-5 root /home/test.sh0,30 14-15 * * 1-5 root /home/test.sh 1`crontab -e -u root` #为某个用户添加计划任务 crontab中最小只能设置到每分钟执行一个命令，如果想每半分钟执行某个命令，可以通过shell脚本的sleep命令配合crontab即可完成这一功能 1*/1 * * * * sleep 30s； echo &quot;this is a test!!&quot; 小结: *，表示任何时候都匹配 可以用&ldquo;A，B，C&rdquo;表示A或者B或者C时执行命令 可以用&ldquo;A-B&rdquo;表示A到B之间时执行命令 可以用&ldquo;*/A&rdquo;表示每A分钟（小时等）执行一次命令","categories":[{"name":"Linux","slug":"Linux","permalink":"https://hqd8080.github.io/categories/Linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hqd8080.github.io/tags/linux/"}]},{"title":"Linux使用cp命令直接覆盖不提示的方法","slug":"linux/linux-cp","date":"2021-11-15T01:30:28.000Z","updated":"2021-12-02T02:19:55.969Z","comments":true,"path":"2021/11/15/linux/linux-cp/","link":"","permalink":"https://hqd8080.github.io/2021/11/15/linux/linux-cp/","excerpt":"","text":"普通的cp命令使用例如：cp abc.txt /home 如果/home里面之前有abc.txt文件，会提示你是否要覆盖？这个时候你需要输入Y，假如文件很多的话，每复制一个文件都要输入一次Y。 下面介绍cp文件时直接覆盖不提示的方法命令如下： \\cp abc.txt /home 直接复制abc.txt 到/home里面，不管/home里面之前是否有这个文件都会直接覆盖，不再出现覆盖提示！","categories":[{"name":"Linux","slug":"Linux","permalink":"https://hqd8080.github.io/categories/Linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://hqd8080.github.io/tags/linux/"}]},{"title":"Go语言协程泄漏","slug":"golang/go-leakage","date":"2020-06-04T12:40:28.000Z","updated":"2022-02-17T09:21:34.035Z","comments":true,"path":"2020/06/04/golang/go-leakage/","link":"","permalink":"https://hqd8080.github.io/2020/06/04/golang/go-leakage/","excerpt":"","text":"Go语言协程泄漏协程泄漏是指由于某种原因，在协程执行后并未正确结束；而是处于阻塞状态。那么此时垃圾回收机制也无法回收这些协程占用的资源；这就导致无法释放的协程数量越来越多，于是发生泄漏 发生协程泄露的场景协程发生泄漏一般是通道chan使用不当；或者锁同步机制使用错误所导致；通道发送不接收；接收不发送；都会导致协程泄漏","categories":[{"name":"Golang","slug":"Golang","permalink":"https://hqd8080.github.io/categories/Golang/"}],"tags":[{"name":"golang","slug":"golang","permalink":"https://hqd8080.github.io/tags/golang/"}]},{"title":"WebSocket协议","slug":"golang/websocket","date":"2020-06-04T12:40:28.000Z","updated":"2022-02-17T09:21:34.002Z","comments":true,"path":"2020/06/04/golang/websocket/","link":"","permalink":"https://hqd8080.github.io/2020/06/04/golang/websocket/","excerpt":"","text":"WebSocket协议原理在WebSocket中，客户端（浏览器）和服务器只需要完成一次握手，在二者之间就能创建持久性的连接（长连接），而后进行双向的数据传输。WebSocket能更好的节省服务器资源和带宽，并且能够更实时的进行通信。一旦建立WebSocket连接，无论是服务器还是客户端，任意一方都可以直接向对方发送数据。 客户端为了和服务端建立一个WebSocket连接，首先要向服务器发起一个HTTP请求，这个请求和普通的请求不一样；会包含一些附加头信息，比如：Upgrade：WebSocket，服务器会解析这些附加头信息。WebSocket协议为了兼容现有浏览器，所以在握手阶段使用了HTTP协议；WebSocket是类似TCP长连接的通信模式；WebSocket协议建立在TCP协议之上","categories":[{"name":"Golang","slug":"Golang","permalink":"https://hqd8080.github.io/categories/Golang/"}],"tags":[{"name":"golang","slug":"golang","permalink":"https://hqd8080.github.io/tags/golang/"},{"name":"webSocket","slug":"webSocket","permalink":"https://hqd8080.github.io/tags/webSocket/"}]},{"title":"Goland文件自动注释配置","slug":"golang/go-goland-setting","date":"2020-06-03T06:22:50.000Z","updated":"2022-02-17T09:21:34.022Z","comments":true,"path":"2020/06/03/golang/go-goland-setting/","link":"","permalink":"https://hqd8080.github.io/2020/06/03/golang/go-goland-setting/","excerpt":"","text":"File / Setting / Editor / File and Template 123456789/** * @Author: $&#123;USER&#125; * @Description: * @File: $&#123;NAME&#125; * @Version: 1.0.0 * @Date: $&#123;DATE&#125; $&#123;TIME&#125; */package $&#123;GO_PACKAGE_NAME&#125; 1234567/** * @Author: $&#123;USER&#125; * @Date: $&#123;DATE&#125; $&#123;TIME&#125; * @Description: */package $&#123;GO_PACKAGE_NAME&#125;","categories":[{"name":"Golang","slug":"Golang","permalink":"https://hqd8080.github.io/categories/Golang/"}],"tags":[{"name":"golang","slug":"golang","permalink":"https://hqd8080.github.io/tags/golang/"}]},{"title":"Go语言保证并发程序的数据安全性","slug":"golang/go-concurrent-safe","date":"2020-06-02T03:24:02.000Z","updated":"2022-02-17T09:21:33.983Z","comments":true,"path":"2020/06/02/golang/go-concurrent-safe/","link":"","permalink":"https://hqd8080.github.io/2020/06/02/golang/go-concurrent-safe/","excerpt":"","text":"并发安全 1.使用chan 2.使用原子性函数atomic函数 3.使用互斥锁sync.mutex 4.使用等待组sync.waitgroup 5.使用context系列函数超时退出","categories":[{"name":"Golang","slug":"Golang","permalink":"https://hqd8080.github.io/categories/Golang/"}],"tags":[{"name":"golang","slug":"golang","permalink":"https://hqd8080.github.io/tags/golang/"}]},{"title":"Dockerfile文件常用指令","slug":"docker/docker-dockerfile","date":"2020-05-26T08:58:17.000Z","updated":"2021-09-01T09:47:16.088Z","comments":true,"path":"2020/05/26/docker/docker-dockerfile/","link":"","permalink":"https://hqd8080.github.io/2020/05/26/docker/docker-dockerfile/","excerpt":"","text":"Dockerfile文件常用指令说明 FROM:指定所创建镜像的基础镜像，任何Dockerfile中第一条指令必须为FROM指令 12# 基础镜像FROM ubuntu:18.04 LABEL:指定镜像添加元数据标签信息，用来补助过滤特定镜像 12# 维护者 LABEL maintainer hqd8080&lt;github.com/hqd8080&gt; EXPOSE:声明镜像内服务监听的端口 12# 开放端口EXPOSE 22 ENV:指定环境变量，在镜像生成过程中被后续RUN指令使用 12ENV APP_VERSION=1.0ENV APP_HOME=/usr/local/app ENTRYPOINT:指定镜像的默认入口命令，启动容器时作为根命令执行，每个Dockerfile文件只能有一个ENTRYPOINT VOLUME:创建一个数据卷挂载点 WORKDIR:配置工作目录；为后续的RUN，CMD，ENTRYPOINT指令配置工作目录","categories":[{"name":"Docker","slug":"Docker","permalink":"https://hqd8080.github.io/categories/Docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://hqd8080.github.io/tags/docker/"}]},{"title":"Docker镜像SSH服务","slug":"docker/docker-ssh","date":"2020-05-26T03:22:56.000Z","updated":"2021-08-31T08:34:15.471Z","comments":true,"path":"2020/05/26/docker/docker-ssh/","link":"","permalink":"https://hqd8080.github.io/2020/05/26/docker/docker-ssh/","excerpt":"","text":"创建目录和文件123mkdir sshd_buildercd sshd_buildertouch Dockerfile run.sh 编写run.sh脚本和authorized_keys文件123#run.sh#!/bin/bash/usr/sbin/sshd -D 1cat ~/.ssh/id_rsa.pub &gt;authorized_keys 编写Dockerfile文件12345678910111213141516171819202122232425262728293031323334353637383940# 基础镜像FROM ubuntu:18.04# 维护者 LABEL maintainer hqd8080&lt;github.com/hqd8080&gt;# 更换为163源码RUN echo &quot;deb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse&quot; &gt; /etc/apt/sources.listRUN echo &quot;deb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.listRUN echo &quot;deb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.listRUN echo &quot;deb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.listRUN echo &quot;deb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.listRUN echo &quot;deb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.listRUN echo &quot;deb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.listRUN echo &quot;deb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.listRUN echo &quot;deb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.listRUN echo &quot;deb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.listRUN apt-get update # 安装ssh服务RUN apt-get install -y openssh-serverRUN mkdir -p /var/run/sshdRUN mkdir -p /root/.ssh# 取消pam限制RUN sed -ri &#x27;s/session required pam_loginuid.so/#session required pam_loginuid.so/g&#x27; /etc/pam.d/sshd# 复制文件到容器ADD authorized_keys /root/.ssh/authorized_keysADD run.sh /run.sh# 修改执行权限RUN chmod 755 /run.sh# 开放端口EXPOSE 22# 设置自启动命令CMD [ &quot;/run.sh&quot; ] 创建镜像12cd sshd_builderdocker build -t sshd_ubuntu:v1 . 运行容器1docker run -d -p 2222:22 sshd_ubuntu 连接容器1ssh 192.168.0.200 -p 2222 github地址https://github.com/hqd8080/sshd_builder","categories":[{"name":"Docker","slug":"Docker","permalink":"https://hqd8080.github.io/categories/Docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://hqd8080.github.io/tags/docker/"}]},{"title":"Docker常用命令说明（总结）","slug":"docker/docker-summary","date":"2020-05-24T09:01:26.000Z","updated":"2021-08-31T08:34:15.480Z","comments":true,"path":"2020/05/24/docker/docker-summary/","link":"","permalink":"https://hqd8080.github.io/2020/05/24/docker/docker-summary/","excerpt":"","text":"获取镜像： 1234sudo docker pull ubuntu #(ubuntu:latest,获取最新版本的镜像)sudo docker pull ubuntu:14.04 #(指定标签来下载指定版本的镜像)sudo docker pull registory.hub.docker.com/ubutu:latest #(相当于以上两个命令的组合)sudo docker pull dl.dockerpoll.com:5000/ubuntu #从dl.dockerpoll.com下载镜像 利用镜像创建容器，在其中运行bash: 1sudo docker run -t -i ubuntu /bin/bash 查看本地已有镜像： 12sudo docker imagessudo docker images -a 创建新的标签: ＃（使用docker tag创建新的标签d.dockerpoll.com:5000/ubuntu:latest） 123sudo docker tag d.dockerpoll.com:5000/ubuntu:latest ubuntu:latestsudo docker inspect image id #查看镜像的详细信息,json格式sudo docker inspect -f &#123;&#123;.Architecture&#125;&#125; 550 #查看其中的一项信息 搜索镜像： 12sudo docker search #搜索远端仓库中共享的镜像，默认搜索docker Hub官方仓库的镜像sudo docker search mysql 删除镜像： 123sudo docker rmi IMAGEsudo docker rmi dl.dockerpool.com:20000/ubuntusudo docker rmi -f ubuntu #强制删除镜像（有容器在运行时和存在要删除的镜像容器一般删除不了） 不推荐强制删除镜像，正确的做法是，先删除镜像的容器然后在删除镜像 1sudo docker ps -a #查看本机上存在的所有容器 创建镜像：（３种） #1.基于已有镜像的容器创建 基于本地模板导入#2.基于Dockerfile创建#3.基于已有镜像的容器创建： 1sudo docker run -ti ubuntu:14.04 /bin/bash #(基于ubuntu14.04创建) 记住容器ID xxxxx 1sudo docker commit -m&quot;Added a new file&quot; -a &quot;docker newbee&quot; xxxxx test #test是tag 基于本地模板导入： 1sudo cat ubuntu-14.04-x86_64-minimal.tar.gz | docker import - ubuntu:14.04 存入和载入镜像 12存入镜像：sudo docker save -o ubuntu_14.04.tar ubuntu:14.04载入镜像：sudo docker load -input ubuntu_14.04.tar 或者 sudo docker load &lt; ubuntu_14.04.tar 上传镜像： 12sudo docker tar test:latest user/test:latestsudo docker push user/test:latest 新建容器 12345sudo docker create -it ubuntu:latestsudo docker ps -asudo docker startsudo docker run ubuntu /bin/echo &#x27;hello world&#x27;sudo docker run -t -i ubuntu:14.04 /bin/bash (启动一个bash终端,允许用户进行交互)，-t: 让docker分配一个伪终端,并绑定到容器的标准输入上-i：让容器的标准输入保持打开 终止容器： 1234sudo docker stop ce5sudo docker ps -a -q#查看终止状态的容器ID信息sudo docker start ce5#启动终止状态的容器sudo docker restart ce5#启动终止状态的容器 进入容器： 1sudo docker exec -ti 容器ID /bin/bash 删除容器： 123sudo docker ps -asudo docker rm 容器IDsudo docker rm -f 容器ID 导入和导出容器： 12sudo docker export ce5&gt;test_for_run_tarcat test_for_run_tar | sudo docker import - test/ubuntu:v1.0","categories":[{"name":"Docker","slug":"Docker","permalink":"https://hqd8080.github.io/categories/Docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://hqd8080.github.io/tags/docker/"}]},{"title":"理解Docker容器container","slug":"docker/docker-container","date":"2020-05-24T08:59:56.000Z","updated":"2021-09-01T09:14:26.559Z","comments":true,"path":"2020/05/24/docker/docker-container/","link":"","permalink":"https://hqd8080.github.io/2020/05/24/docker/docker-container/","excerpt":"","text":"Docker容器容器是镜像的一个运行实例，所不同的是，镜像是静态的只读文件，而容器带有运行时需要的可写文件层1234docker create -it ubuntu:latest //(处于停止状态,docker start启动)docker ps -a //查看所有的容器docker start 容器id //启动docker stop 容器id //停止 创建容器并启动容器123456docker run ubuntu /bin/echo &#x27;hello world&#x27;(自动终止)docker run -it ubuntu:18.04 /bin/bash#(启动一个bash终端,允许用户进行交互)#-t: 让docker分配一个伪终端,并绑定到容器的标准输入上#-i：让容器的标准输入保持打开 守护态运行1234567docker run -d ubuntu /bin/sh -c &quot;test&quot;#终止容器docker stop ce5docker ps -a -q #查看终止状态的容器ID信息docker start ce5 #启动终止状态的容器docker restart ce5 #启动终止状态的容器 查看某个容器的输出日志1docker logs ce554267d7a4 进入容器（最为推荐的方式）1docker exec -it 容器ID /bin/bash 删除容器（只能删除处于终止状态或退出状态的容器，不能删除运行状态的容器）123456sudo docker ps -asudo docker rm 容器IDsudo docker rm -f 容器ID#查看正在运行的容器docker ps 导入和导出容器：123docker export ce5&gt;test_for_run_tarcat test_for_run_tar | docker import - test/ubuntu:v1.0","categories":[{"name":"Docker","slug":"Docker","permalink":"https://hqd8080.github.io/categories/Docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://hqd8080.github.io/tags/docker/"}]},{"title":"理解Docker的镜像image","slug":"docker/docker-image","date":"2020-05-24T08:58:48.000Z","updated":"2021-09-01T09:02:23.636Z","comments":true,"path":"2020/05/24/docker/docker-image/","link":"","permalink":"https://hqd8080.github.io/2020/05/24/docker/docker-image/","excerpt":"","text":"Docker通过容器来打包应用，（环境和代码）Docker的三大核心概念： 1.镜像（image） 2.容器（container） 3.仓库（repository） 镜像：类似于虚拟机环境，只读的模板，镜像是创建容器的基础 容器：从镜像创建的应用运行实例，盒子，沙箱，互不可见，隔离 仓库：docker集中存放镜像的场所，类似代码仓库 Docker仓库和仓库注册服务器的关系仓库注册服务器是存放仓库的地方，每个仓库集中存放某一类镜像，通过不同的tag来区分(类似git管理) 注册服务器 --&gt; 创库 --&gt; 各种仓库的不同tag版本 将当前用户加入安装中自带的Docker组1sudo usermod -aG docker hqd8080 获取镜像123docker pull name:tag //(名称+标签)docker pull ubuntu:18.04 //默认从官方拉取docker pull ubuntu //下载最新的镜像,默认是(ubuntu:latest) 从网易丰巢下载镜像1docker pull hub.c.163.com/public/ubuntu:18.04 通过镜像创建容器1docker run -it ubuntu:18.04 bash 查看镜像信息12docker imagesdocker images -a 使用tag给已经存在的镜像打标签1docker tag ubuntu:18.04 myubuntu:latest 使用history查看镜像历史,列出各层的创建信息123docker history ubuntu:18.04#详细信息(不截断)docker history ubuntu:18.04 --no-trunc 搜索镜像（远端仓库共享镜像|官方）1docker search ubuntu 删除镜像1234567891011docker rmi myubuntu:latestdocker images -a#使用镜像ID删除镜像的相关注意事项#有容器正在运行无法通过ID直接删除镜像，必须先删除依赖的容器，或者用-f强制删除docker run ubuntu:18.04 echo &#x27;hello hqd8080&#x27;docker ps -adocker rmi ubuntu:18.04docker rmi -f ubuntu:18.04docker rm a5212cvvbdgfsh // 使用镜像ID删除镜像 创建镜像的三种方法：1.基于已有的镜像的容器创建 123sudo docker run -ti ubuntu:18.04 /bin/bash #(基于ubuntu18.04创建)#记住容器ID xxxxxsudo docker commit -m&quot;Added a new file&quot; -a &quot;docker newbee&quot; xxxxx test #test是tag 2.基于本地模版导入创建 1sudo cat ubuntu-18.04-x86_64-minimal.tar.gz | docker import - ubuntu:18.04 3.基于dockerfile创建 存入和载入镜像12345#存入镜像sudo docker save -o ubuntu_18.04.tar ubuntu:18.04#载入镜像sudo docker load —input ubuntu_18.04.tar 或者 sudo docker load &lt; ubuntu_18.04.tar","categories":[{"name":"Docker","slug":"Docker","permalink":"https://hqd8080.github.io/categories/Docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://hqd8080.github.io/tags/docker/"}]},{"title":"理解Docker的仓库","slug":"docker/docker-warehouse","date":"2020-05-24T08:58:17.000Z","updated":"2021-09-01T09:26:03.786Z","comments":true,"path":"2020/05/24/docker/docker-warehouse/","link":"","permalink":"https://hqd8080.github.io/2020/05/24/docker/docker-warehouse/","excerpt":"","text":"Docker仓库仓库是集中存放镜像的地方，可分为公共仓库和私有仓库 注册服务器是存放仓库的具体服务器，一个注册服务器可以有多个仓库，而每个仓库下面可以有多个镜像 private-docker.com/ubuntu:（private-docker.com是注册服务器ubuntu是仓库名） docker hub公共镜像市场 https://hub.docker.com/ 搜索官方镜像，并下载 123sudo docker search -s 5 centossudo docker pull cenros Docker数据管理容器数据管理的两种方式 数据卷：容器内数据直接映射到本地主机环境 数据卷容器：使用特定容器维护数据卷 数据卷：一个可以供容器使用的特殊目录，它将主机操作系统目录直接映射进容器 在容器内创建数据卷挂载一个主机目录作为数据卷 1docker run -d -P --name web -v /src/webapp:/opt/webapp training/webapp python app.py 加载主机目录/src/webapp到容器/opt/webapp使用training/webapp创建一个容器web 数据卷容器操作例子创建一个数据卷容器dbdata1docker run -it -v /dbdata --name dbdata ubuntu ok之后在其他容器中使用--volumes-from来挂载dbdata容器中的数据卷，例如db1,db2两个容器，并从dbdata容器挂载数据卷 docker run -it --volumes-from dbdata --name db1 ubuntu docker run -it --volumes-from dbdata --name db2 ubuntu 这样三个容器都能共享数据 端口映射和容器互联容器互联的使用 创建数据库容器 1docker run -d --name db training/postgres 创建一个新的web容器，并将它连接db容器 1docker run -d -P --name web --link db:db training/webapp python app.py 使用Dockerfile创建镜像 Dockerfile文本格式的配置文件 run命令：对镜像执行命令，每一个run指令，镜像就添加新的一层 cmd命令：对容器执行命令 指令说明： from：指定创建镜像的基础镜像 run：运行命令 cmd：指定启动容器时默认执行的指令 add：从主机复制文件到容器 copy：复制主机路径下的内容到容器，目标路径不存在时，会自动创建 创建镜像docker build .","categories":[{"name":"Docker","slug":"Docker","permalink":"https://hqd8080.github.io/categories/Docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://hqd8080.github.io/tags/docker/"}]},{"title":"Ubuntu16.04LTS安装docker","slug":"docker/docker-install-ubuntu1604","date":"2020-05-24T07:29:05.000Z","updated":"2021-09-01T08:28:56.912Z","comments":true,"path":"2020/05/24/docker/docker-install-ubuntu1604/","link":"","permalink":"https://hqd8080.github.io/2020/05/24/docker/docker-install-ubuntu1604/","excerpt":"","text":"查看系统版本信息1cat /etc/issue Ubuntu 16.04.2 LTS \\n \\l 在ubuntu上简单的安装方法12sudo apt-get updatesudo apt-get install docker 搞定!（这种安装方法的缺点是安装的docker版本不是最新的版本）下面介绍推荐的安装docker方式 注意(Docker需要64的操作系统,此外你的kernel内核至少要在3.10版本之上)官方的参考文档： https://docs.docker.com/engine/installation/linux/ubuntulinux/ 12sudo apt-get updatesudo apt-get install apt-transport-https ca-certificates 导入gpg密钥123sudo apt-key adv \\ —keyserver hkp://ha.pool.sks-keyservers.net:80 \\ —recv-keys 58118E89F3A912897C070ADBF76221572C52609D 添加docker源，其它版本添加请参照官方文档，官方只提供LTS版本的源找到对应版本的源地址，16.04对应到源地址为: 1deb https://apt.dockerproject.org/repo ubuntu-xenial main 执行命令添加源1echo &quot;deb https://apt.dockerproject.org/repo ubuntu-xenial main&quot; | sudo tee /etc/apt/sources.list.d/docker.list 更新源1sudo apt-get update 查看可安装列表(这步可以略过)1apt-cache policy docker-engine 安装 默认安装最近的版本1sudo apt-get install docker-engine 启动1sudo service docker start 运行hello world1sudo docker run hello-world 结果:123456789101112131415Hello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: The Docker client contacted the Docker daemon. The Docker daemon pulled the “hello-world” image from the Docker Hub. The Docker daemon created a new container from that image which runs theexecutable that produces the output you are currently reading. The Docker daemon streamed that output to the Docker client, which sent itto your terminal.To try something more ambitious, you can run an Ubuntu container with:$ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker Hub account:https://hub.docker.comFor more examples and ideas, visit:https://docs.docker.com/engine/userguide/ 如果出现网络问题无法下载，就先从网易蜂巢的镜像市场到hello-world运行docker run hub.c.163.com/library/hello-world 或者先pull后run1docker pull hub.c.163.com/library/hello-world:latest 以非管理员权限运行（每次运行要加sudo也不是事，对吧）创建docker用户组(默认已经创建)1sudo groupadd docker 将当前用户加到这个组里(不用改$USER这几个字，$USER这个环境变量就是指当前用户名) 1sudo usermod -aG docker $USER 再尝试运行1docker run hello-world 如果运行出现Cannot connect to the Docker daemon. Is the docker daemon running on this host? 官方文档提示你设置环境变量，其实没什么用，从网上看到很多结果都是无意中突然好了~ 事实上是因为加入用户组这个东西必须注销或重启才能生效，你注销或者重启一下马上就好了 常用命令1234docker version #查看版本docker images #查看镜像列表docker images -a #查看镜像列表docker rmi -f [镜像id] #删除指定镜像","categories":[{"name":"Docker","slug":"Docker","permalink":"https://hqd8080.github.io/categories/Docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://hqd8080.github.io/tags/docker/"}]},{"title":"Dockerfile实战构建自己的基础镜像","slug":"docker/docker-create-base-img","date":"2020-05-24T07:14:39.000Z","updated":"2021-09-01T08:28:44.740Z","comments":true,"path":"2020/05/24/docker/docker-create-base-img/","link":"","permalink":"https://hqd8080.github.io/2020/05/24/docker/docker-create-base-img/","excerpt":"","text":"以下是docker Hub上下载官方仓库的ubuntu14.04镜像(188M)，用它来构建合适自己的ubuntu基础镜像 12345678910111213141516171819202122#this dockerfile uses the ubuntu image使用docker Hub官方的ubuntu14.04镜像构建version 0.1author: hqd8080指定所创建镜像的基础镜像FROM ubuntu:14.04#维护者信息MAINTAINER github.com/hqd8080#指定镜像生成的元数据标签信息LABEL version=&quot;0.1&quot;LABEL description=&quot;ubuntu14.04 base image&quot;#将复制指定的文件到容器中#格式:ADD #例子:ADD *.c /code/ADD sources.list /etc/apt/#CMD用来启动容器时默认执行的命令CMD [&quot;/bin/bash&quot;] 构建sudo docker build -t=&quot;hqd8080/my_ubuntu:14.04_base_images&quot; . 123sudo docker build中-t表示容器的名字hqd8080/my_ubuntu中navas表示仓库名（不允许大写）,my_ubuntu表示镜像名my_ubuntu:14.04_base_images后的14.04_base_images是标签,如果没有指定,默认的是latest 1234#hqd8080$ tree.├── Dockerfile├── README.md└── sources.list(从我当前的系统复制过来) 12Successfully built 1a00f5985fdcSuccessfully tagged navas/my_ubuntu:14.04_base_images 查看镜像sudo docker images -a","categories":[{"name":"Docker","slug":"Docker","permalink":"https://hqd8080.github.io/categories/Docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://hqd8080.github.io/tags/docker/"}]},{"title":"Ubuntu安装docker-compose","slug":"docker/docker-install-decker-compose","date":"2020-05-24T06:52:29.000Z","updated":"2021-09-01T08:29:29.809Z","comments":true,"path":"2020/05/24/docker/docker-install-decker-compose/","link":"","permalink":"https://hqd8080.github.io/2020/05/24/docker/docker-install-decker-compose/","excerpt":"","text":"docker-compose的下载地址为:https://github.com/docker/compose/releases 以下以docker-compose1.16.1版本安装为例子：1curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose 1chmod +x /usr/local/bin/docker-compose 如果报错：bash: /usr/local/bin/docker-compose: 权限不够 请切换超级管理员sudo -i 然后再执行chmod +x /usr/local/bin/docker-compose 安装成功查看信息:docker-compose --version docker-compose version 1.16.1, build 6d1ac21","categories":[{"name":"Docker","slug":"Docker","permalink":"https://hqd8080.github.io/categories/Docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://hqd8080.github.io/tags/docker/"}]},{"title":"Ubuntu系统docker解决sudo权限问题","slug":"docker/docker-power","date":"2020-05-24T06:41:02.000Z","updated":"2021-09-01T08:29:45.684Z","comments":true,"path":"2020/05/24/docker/docker-power/","link":"","permalink":"https://hqd8080.github.io/2020/05/24/docker/docker-power/","excerpt":"","text":"如果还没有 docker group 就添加一个：1sudo groupadd docker 将用户加入该 group 内,然后退出并重新登录就生效1sudo gpasswd -a $&#123;USER&#125; docker 重启 docker 服务1systemctl restart docker 切换当前会话到新 group 或者重启 X 会话1newgrp - docker 注意:最后一步是必须的，否则因为 groups 命令获取到的是缓存的组信息，刚添加的组信息未能生效所以 docker images 执行时同样有错","categories":[{"name":"Docker","slug":"Docker","permalink":"https://hqd8080.github.io/categories/Docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://hqd8080.github.io/tags/docker/"}]},{"title":"Docker安装MySQL8.0","slug":"docker/docker-install-mysql","date":"2020-05-24T06:15:24.000Z","updated":"2021-08-31T08:34:15.464Z","comments":true,"path":"2020/05/24/docker/docker-install-mysql/","link":"","permalink":"https://hqd8080.github.io/2020/05/24/docker/docker-install-mysql/","excerpt":"","text":"Docker安装MySQL8.0拉取最新版mysql镜像docker pull mysql 查看镜像docker images -a 运行容器docker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:latest 123–name： 容器名，此处命名为mysql-e： 配置信息，此处配置mysql的root用户的登录密码-p： 端口映射，此处映射 主机3306端口 到 容器的3306端口 如果要建立目录映射 1234567docker run -p 3306:3306 --name mysql \\-v /usr/local/docker/mysql/conf:/etc/mysql \\-v /usr/local/docker/mysql/logs:/var/log/mysql \\-v /usr/local/docker/mysql/data:/var/lib/mysql \\-e MYSQL_ROOT_PASSWORD=123456 \\-d mysql:latest-v：主机和容器的目录映射关系，&quot;:&quot;前为主机目录，之后为容器目录 检查容器是否正确运行docker container ls | docker ps -a 进入容器 12docker exec -it mysql bashmysql -uroot -p123456 宿主机链接容器的mysql（远程连接mysql）我们在创建容器的时候已经将容器的3306端口和主机的3306端口映射到一起，所以我们应该访问： 1234host: 127.0.0.1port: 3306user: rootpassword: 123456 如果你的容器运行正常，但是无法访问到MySQL，一般有以下几个可能的原因： caching_sha2_password问题为了提供更安全的密码加密MySQL8.0的首选默认认证插件是，caching_sha2_password而不是mysql_native_password 123456789101112131415mysql&gt; use mysql;mysql&gt; select host, user, plugin from user;+-----------+------------------+-----------------------+| host | user | plugin |+-----------+------------------+-----------------------+| % | root | mysql_native_password || localhost | mysql.infoschema | caching_sha2_password || localhost | mysql.session | caching_sha2_password || localhost | mysql.sys | caching_sha2_password || localhost | root | mysql_native_password |+-----------+------------------+-----------------------+ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;flush privileges; 或者 1234567docker exec -it mysql bashmysql -uroot -p123456配置 mysql.cnf 配置默认身份验证插件/etc/mysql/ [mysqld]default_authentication_plugin = mysql_native_password 防火墙阻拦 开放端口：systemctl status firewalldfirewall-cmd --zone=public --add-port=3306/tcp -permanentfirewall-cmd --reload 关闭防火墙：systemctl stop firewalld 需要进入docker本地客户端设置远程访问账号 1234docker exec -it mysql bashmysql -uroot -p123456grant all privileges on *.* to root@&#x27;%&#x27; identified by &quot;password&quot;; mysql使用mysql数据库中的user表来管理权限，修改user表就可以修改权限（只有root账号可以修改） 1234567891011121314151617use mysql;select host, user, plugin from user;+-----------+------------------+-----------------------+| host | user | plugin |+-----------+------------------+-----------------------+| % | root | mysql_native_password || localhost | mysql.infoschema | caching_sha2_password || localhost | mysql.session | caching_sha2_password || localhost | mysql.sys | caching_sha2_password || localhost | root | mysql_native_password |+-----------+------------------+-----------------------+grant all privileges on *.* to root@&#x27;%&#x27; identified by &quot;password&quot;;flush privileges;","categories":[{"name":"Docker","slug":"Docker","permalink":"https://hqd8080.github.io/categories/Docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://hqd8080.github.io/tags/docker/"}]},{"title":"清除项目Git版本控制信息","slug":"git/git-clear","date":"2020-05-23T12:40:28.000Z","updated":"2022-03-04T02:39:23.229Z","comments":true,"path":"2020/05/23/git/git-clear/","link":"","permalink":"https://hqd8080.github.io/2020/05/23/git/git-clear/","excerpt":"","text":"首先进入项目目录下: cd project 然后执行: find . -name &quot;.git&quot; | xargs rm -rf","categories":[{"name":"Git","slug":"Git","permalink":"https://hqd8080.github.io/categories/Git/"}],"tags":[{"name":"git","slug":"git","permalink":"https://hqd8080.github.io/tags/git/"}]},{"title":"分布式系统中的CAP原理","slug":"microservice/microservice-CAP","date":"2020-05-22T15:40:28.000Z","updated":"2021-08-31T15:12:54.035Z","comments":true,"path":"2020/05/22/microservice/microservice-CAP/","link":"","permalink":"https://hqd8080.github.io/2020/05/22/microservice/microservice-CAP/","excerpt":"","text":"分布式系统中的CAP原理CAP：描述分布式系统下，节点数据同步的基本定理 1231.一致性2.可用性3.分区容忍性 以上三个指标不可能同时满足，分布式系统分区容忍性是必须要满足的","categories":[{"name":"微服务","slug":"微服务","permalink":"https://hqd8080.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"}],"tags":[{"name":"微服务","slug":"微服务","permalink":"https://hqd8080.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"microservice","slug":"microservice","permalink":"https://hqd8080.github.io/tags/microservice/"}]},{"title":"微服务学习笔记","slug":"microservice/microservice","date":"2020-05-22T15:40:28.000Z","updated":"2021-08-31T15:12:10.525Z","comments":true,"path":"2020/05/22/microservice/microservice/","link":"","permalink":"https://hqd8080.github.io/2020/05/22/microservice/microservice/","excerpt":"","text":"微服务学习微服务核心组件：1234567- 1.服务注册与发现- 2.远程过程调用RPC- 3.分布式配置中心- 4.微服务网关- 5.微服务的容错处理与负载均衡- 6.统一认证与授权- 7.分布式链式追踪 微服务设计的6大原则：123456- 1.高内聚，低耦合- 2.高度自治- 3.以业务为中心- 4.弹性设计- 5.日志与监控- 6.自动化 微服务架构：将单体应用转化为多个可以；独立开发；独立部署；独立运行；和独立维护的服务或者应用的集合； 微服务：是指将大型复杂软件应用拆分成多个简单应用；每个应用描述着一个小业务；系统中的应用可被独立部署；每个微服务仅关注于完成（单一职责）；分而治之 ；模块化； 微服务的特点：1234- 1.独立开发；独立部署；独立运行- 2.微服务之间采用RESTful API或者RPC等协议通信- 3.微服务遵循单一原则- 4.微服务一般使用容器部署 微服务的缺点：123- 1.服务拆分过多；服务治理成本较高；不利于系统维护；- 2.服务之间相互依赖；有可能形成复杂的依赖链条；出现服务雪崩效应；- 3.服务实例之间交互需要处理分布式事务，调用幂等和重试等问题； SOA和微服务的区别：1- SOA注重的是系统集成；而微服务关注的是完全分离； Go的微服务框架：12- 1.go-kit：应用程序架构由三部分组成：传输层；接口层；服务层；- 2.go-micro：插件化的RPC微服务框架；提供了（服务发现）；（负载均衡）；（同步传输）；（异步通信）；（事件驱动）； 组件化的微服务框架；组件是分层的；上层基于下层功能继续向上提供服务； go-micro框架中的组件介绍（7个）可插拔的架构设计理念：1234567- Registry：服务发现组件（提供服务发现机制；解析服务名称至服务地址；目前支持的注册中心；etcd;consul;zookeeper）- Selector：基于Registry的客户端负载均衡组件；client组件使用selector组件从Registry返回的服务列表中进行负载均衡选择；- Broker：发布和订阅组件；服务之间基于消息中间件的异步通信方式；kafka；rabbitMQ等；- Transport：服务之间同步通信方式- Codec：服务之间的编码和解码组件- Server：服务主体，对外提供 统一的服务请求入口- Client：提供访问微服务的客户端； go-kit和go-micro的区别：12- go-kit是一个微服务的标准库；go-kit提供了独立的包；通过这些包开发者可以组件自己的应用程序；- go-micro是一个面向微服务的可插拔RPC框架；它尝试使用组件的方式简化分布式系统之间的通信； 微服务设计的6大原则123456- 1.（高内聚，低耦合）单一职责；轻量级通信；服务之间的契约- 2.（高度自治）能独立开发；部署；发布；进程隔离；独立的代码库；流水线；- 3.（以业务为中心）每个微服务代表了特定的业务逻辑；能更快的响应业务变化；- 4.（弹性设计）容错；服务降级；- 5.（日志与容错）日志集合；监控和警告；- 6.（自动化）持续集成；持续交付； 领域驱动设计（DDD）领域驱动设计是一种思想；一种方法论；对软件系统进行合理拆分；最终的目标还是，高内聚，低耦合；领域驱动设计分层 （微服务的划分粒度）1234- 1.用户界面（表现层或接口层） User interface- 2.应用层 Application- 3.领域层 Domain - 4.基础实施层 Infrastructure","categories":[{"name":"微服务","slug":"微服务","permalink":"https://hqd8080.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"}],"tags":[{"name":"微服务","slug":"微服务","permalink":"https://hqd8080.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"microservice","slug":"microservice","permalink":"https://hqd8080.github.io/tags/microservice/"}]},{"title":"Git flow","slug":"git/git-flow","date":"2020-05-22T12:40:28.000Z","updated":"2022-03-04T02:34:39.910Z","comments":true,"path":"2020/05/22/git/git-flow/","link":"","permalink":"https://hqd8080.github.io/2020/05/22/git/git-flow/","excerpt":"","text":"git flow 1.master主分支，存放稳定的项目版本，这个分支主要是从别的分支合并过来，不会直接在这个分支上提交 2.develop开发分支，当要新增新功能时，所有的feature分支都是从这个分支划分出去的，而feature分支功能完成后也会合并回develop分支 3.hotfix分支，当线上发生紧急问题时，从master分支划分出hotfix进行紧急问题修复，修复完成合并回master，同时合并回develop分支 4.release分支，发布线上分支，develop分支足够成熟可合并到release分支 5.feature分支，新增功能的分支，从develop分支划出，完成后合并回develop分支 新建新分支1git branch new-branch 新建分支并且切换至新分支1git checkout -b new-branch 查看分支123git branch 当前分支git branch -a 所有分支git branch -r 远程分支 修改分支名称，development改成develop1git branch -m development develop 删除分支1git branch -d develop 强制删除，还没合并的分支也能删除1git branch -D dev 查看提交记录1git log --oneline git切换分支做的事情 1.更新暂存区和工作目录 2.变更HEAD的位置","categories":[{"name":"Git","slug":"Git","permalink":"https://hqd8080.github.io/categories/Git/"}],"tags":[{"name":"git","slug":"git","permalink":"https://hqd8080.github.io/tags/git/"}]},{"title":"Go语言启动10个goroutine处理任务的例子","slug":"golang/go-chan","date":"2020-05-22T12:40:28.000Z","updated":"2022-02-17T09:21:34.013Z","comments":true,"path":"2020/05/22/golang/go-chan/","link":"","permalink":"https://hqd8080.github.io/2020/05/22/golang/go-chan/","excerpt":"","text":"Go语言启动10个goroutine处理任务的例子 123456789101112131415161718192021222324252627package mainimport ( &quot;fmt&quot; &quot;time&quot;)func main() &#123; channels := make([]chan int, 10) for i := 0; i &lt; 10; i++ &#123; channels[i] = make(chan int) go process(channels[i]) &#125; for i, ch := range channels &#123; &lt;-ch fmt.Println(&quot;routine:&quot;, i, &quot;quit&quot;) &#125;&#125;func process(ch chan int) &#123; // 模拟处理任务 time.Sleep(time.Second) ch &lt;- 1&#125; 输出 12345678910routine: 0 quitroutine: 1 quitroutine: 2 quitroutine: 3 quitroutine: 4 quitroutine: 5 quitroutine: 6 quitroutine: 7 quitroutine: 8 quitroutine: 9 quit","categories":[{"name":"Golang","slug":"Golang","permalink":"https://hqd8080.github.io/categories/Golang/"}],"tags":[{"name":"golang","slug":"golang","permalink":"https://hqd8080.github.io/tags/golang/"}]},{"title":"Go语言字符串和数据类型转换总结","slug":"golang/go-data-type-convert","date":"2020-05-22T12:40:28.000Z","updated":"2022-02-17T09:21:33.993Z","comments":true,"path":"2020/05/22/golang/go-data-type-convert/","link":"","permalink":"https://hqd8080.github.io/2020/05/22/golang/go-data-type-convert/","excerpt":"","text":"Go语言字符串和数据类型转换总结 字符串转数字 12345// string to int int, err := strconv.Atoi(string)// string to int64int64, err := strconv.ParseInt(string, 10, 64) 数字转字符串 12345// int to string string := strconv.Itoa(int)// int64 to string string := strconv.FormatInt(int64, 10)","categories":[{"name":"Golang","slug":"Golang","permalink":"https://hqd8080.github.io/categories/Golang/"}],"tags":[{"name":"golang","slug":"golang","permalink":"https://hqd8080.github.io/tags/golang/"}]},{"title":"Go语言的G-P-M模型","slug":"golang/go-gmp","date":"2020-05-22T12:40:28.000Z","updated":"2022-02-17T09:21:34.005Z","comments":true,"path":"2020/05/22/golang/go-gmp/","link":"","permalink":"https://hqd8080.github.io/2020/05/22/golang/go-gmp/","excerpt":"","text":"Go语言的G-P-M模型G：goroutine,表示一个协程对象，用go关键字加函数调用即可创建一个G对象，它是对并发执行任务的封装，也可以看作是一种特殊的协程，G属于用户级资源，对操作系统透明，非常轻量级，可以大量创建，且上下文切换成本比较低 M：machine的简称，可以看作是利用系统调用创建出来的操作系统上的线程实体，M的作用就是执行G中封装的并发任务，M属于操作系统资源，可创建的数量受限于操作系统， 一般来说G的数量都多于M的数量 P：processor的简称，表示逻辑处理器，每个P都有一个G队列，主要用于管理G对象，并为G在M上的运行提供本地化资源 M与P是一对一的关系，M会从P的本地队列中弹出一个可运行状态的G来执行，如果P中的本地队列为空，就会执行窃取 进程，线程，协程的概念进程：process，进程是操作系统进行资源分配和调度的基本单位，是操作系统结构的基础，每个进程都有自己的独立内存空间，不同进程通过；进程间的通信机制来通信，进程间上下文的切换开销比较大，但相对比较稳定，安全。从理论上来讲，进程是对正在运行的程序过程的抽象 线程：thread，线程是进程中的一个实体，拥有自己独立的栈和共享堆，线程的切换一般是由操作系统调度，进程和线程是一对多的关系；一个进程由多个线程构成，而一个线程必属于一个进程 协程：goroutine，又称为轻量级的线程，协程是一种用户态的轻量级线程，调度完全由用户控制，协程拥有自己的寄存器上下文和栈，上下文的切换非常快，一个线程可以由多个协程组成 线程和协程的主要区别线程的调度方式是抢占式的，如果一个线程的执行时间超过了分配给它的时间片，那么它就会被其他可执行的线程抢占；协程的调度是协同式的，在协同式调度中没有时间片的概念，为了并发执行协程，调度器会在以下几种时间点对其进行切换： 1通道channel接收或者发送会造成阻塞的消息 2垃圾回收 3文件和网络操作","categories":[{"name":"Golang","slug":"Golang","permalink":"https://hqd8080.github.io/categories/Golang/"}],"tags":[{"name":"golang","slug":"golang","permalink":"https://hqd8080.github.io/tags/golang/"}]},{"title":"Go语言使用反射获取结构体中的Tag信息","slug":"golang/go-reflect","date":"2020-05-22T12:40:28.000Z","updated":"2022-02-17T09:21:34.019Z","comments":true,"path":"2020/05/22/golang/go-reflect/","link":"","permalink":"https://hqd8080.github.io/2020/05/22/golang/go-reflect/","excerpt":"","text":"Go语言使用反射获取结构体中的Tag信息 1234567891011121314151617181920212223242526272829303132package mainimport ( &quot;fmt&quot; &quot;reflect&quot;)type Cat struct &#123; Name string Attr string `json:&quot;attr&quot; id:&quot;222&quot;`&#125;func main() &#123; ins := Cat&#123; Name: &quot;BBA&quot;, Attr: &quot;BNW&quot;, &#125; t := reflect.TypeOf(ins) for i := 0; i &lt; t.NumField(); i++ &#123; field := t.Field(i) fmt.Println(field.Name) fmt.Println(field.Type) fmt.Println(field.Tag) &#125; fmt.Println(&quot;--------------------------&quot;) if f, ok := t.FieldByName(&quot;Attr&quot;); ok &#123; fmt.Println(f.Tag.Get(&quot;json&quot;)) fmt.Println(f.Tag.Get(&quot;id&quot;)) &#125;&#125; 12345678910NamestringAttrstringjson:&quot;attr&quot; id:&quot;222&quot;--------------------------attr222","categories":[{"name":"Golang","slug":"Golang","permalink":"https://hqd8080.github.io/categories/Golang/"}],"tags":[{"name":"golang","slug":"golang","permalink":"https://hqd8080.github.io/tags/golang/"}]},{"title":"Go语言启动4个协程处理10个任务的例子","slug":"golang/go-work","date":"2020-05-22T12:40:28.000Z","updated":"2022-02-17T09:21:34.032Z","comments":true,"path":"2020/05/22/golang/go-work/","link":"","permalink":"https://hqd8080.github.io/2020/05/22/golang/go-work/","excerpt":"","text":"Go语言启动4个协程处理10个任务的例子 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package mainimport ( &quot;fmt&quot; &quot;math/rand&quot; &quot;sync&quot; &quot;time&quot;)const ( numberGoroutines = 4 taskLoad = 10)var wg sync.WaitGroupfunc init() &#123; rand.Seed(time.Now().Unix())&#125;func main() &#123; tasks := make(chan string, taskLoad) wg.Add(numberGoroutines) for i := 1; i &lt;= numberGoroutines; i++ &#123; go work(tasks, i) &#125; for post := 1; post &lt;= taskLoad; post++ &#123; tasks &lt;- fmt.Sprintf(&quot;Task:%d&quot;, post) &#125; close(tasks) wg.Wait()&#125;func work(tasks chan string, worker int) &#123; defer wg.Done() for &#123; task, ok := &lt;-tasks if !ok &#123; fmt.Printf(&quot;worker:%d shutting down(关闭)\\n&quot;, worker) return &#125; fmt.Printf(&quot;Worker:%d started %s\\n&quot;, worker, task) sleep := rand.Int63n(100) time.Sleep(time.Duration(sleep) * time.Millisecond) fmt.Printf(&quot;Worker:%d completed %s\\n&quot;, worker, task) &#125;&#125; 输出： 123456789101112131415161718192021222324Worker:4 started Task:1Worker:2 started Task:2Worker:1 started Task:4Worker:3 started Task:3Worker:4 completed Task:1Worker:4 started Task:5Worker:3 completed Task:3Worker:3 started Task:6Worker:3 completed Task:6Worker:3 started Task:7Worker:1 completed Task:4Worker:1 started Task:8Worker:2 completed Task:2Worker:2 started Task:9Worker:2 completed Task:9Worker:2 started Task:10Worker:3 completed Task:7worker:3 shutting down(关闭)Worker:4 completed Task:5worker:4 shutting down(关闭)Worker:1 completed Task:8worker:1 shutting down(关闭)Worker:2 completed Task:10worker:2 shutting down(关闭)","categories":[{"name":"Golang","slug":"Golang","permalink":"https://hqd8080.github.io/categories/Golang/"}],"tags":[{"name":"golang","slug":"golang","permalink":"https://hqd8080.github.io/tags/golang/"}]},{"title":"Redis哈希类型（hash）的使用","slug":"redis/redis-hash","date":"2020-05-22T12:40:28.000Z","updated":"2021-09-01T16:28:33.236Z","comments":true,"path":"2020/05/22/redis/redis-hash/","link":"","permalink":"https://hqd8080.github.io/2020/05/22/redis/redis-hash/","excerpt":"","text":"Redis哈希类型（hash）的使用 哈希表示字段和值之间的映射关系 12345// 一次性设置和获取多个哈希属性键值127.0.0.1:6379&gt; hmset &quot;hqd8080&quot; &quot;phone&quot; &quot;18111111111&quot; &quot;address&quot; &quot;shanghai china&quot;127.0.0.1:6379&gt; hmget &quot;hqd8080&quot; &quot;phone&quot; &quot;address&quot;1) &quot;18111111111&quot;2) &quot;shanghai china&quot; 12// 获取哈希的一个属性hget127.0.0.1:6379&gt; hget hqd8080 address 12// 测试哈希中是否存在某个字段、属性，hexists127.0.0.1:6379&gt; hexists hqd8080 &quot;phone&quot; 123456// 获取哈希中的所有字段 hgetall127.0.0.1:6379&gt; hgetall hqd80801) &quot;phone&quot;2) &quot;18111111111&quot;3) &quot;address&quot;4) &quot;shanghai china&quot; 12345// 删除哈希中的摸个字段，hdel127.0.0.1:6379&gt; hdel hqd8080 &quot;phone&quot;127.0.0.1:6379&gt; hgetall hqd80801) &quot;address&quot;2) &quot;shanghai china&quot; 12// 仅当哈希字段不存在时才创建，避免hmset的覆盖字段行为127.0.0.1:6379&gt; hsetnx &quot;hqd8080&quot; &quot;phone&quot; &quot;11111111111&quot; 1234567// 哈希字段非常多建议使用hscan，是一种指针迭代器，不会造成服务器阻塞，适合非常大的哈希127.0.0.1:6379&gt; hscan hqd8080 0 match &quot;*a*&quot;1) &quot;0&quot; // 服务器返回的新游标，用来进行一次新的迭代，0代表哈希遍历完成2) 1) &quot;address&quot;2) &quot;shanghai china&quot;127.0.0.1:6379&gt; hscan hqd8080 新游标 match &quot;*a*&quot;","categories":[{"name":"Redis","slug":"Redis","permalink":"https://hqd8080.github.io/categories/Redis/"}],"tags":[{"name":"redis","slug":"redis","permalink":"https://hqd8080.github.io/tags/redis/"}]},{"title":"Redis类型（HyperLogLog）的使用","slug":"redis/redis-hyperLogLog","date":"2020-05-22T12:40:28.000Z","updated":"2021-09-01T16:40:11.521Z","comments":true,"path":"2020/05/22/redis/redis-hyperLogLog/","link":"","permalink":"https://hqd8080.github.io/2020/05/22/redis/redis-hyperLogLog/","excerpt":"","text":"Redis类型HyperLogLog的使用 唯一计数 HyperLogLog 123456// 根据uid统计访问次数，去重127.0.0.1:6379&gt; pfadd &quot;count&quot; 12343127.0.0.1:6379&gt; pfadd &quot;count&quot; 2127.0.0.1:6379&gt; pfcount count // 2 位图节约存储空间，底层数据类型是字符串 设置键的过期时间原理：设置键的过期时间会被存储为一个绝对的UNIX时间戳；即使redis服务器宕机了一段时间；这个时间戳也会被持久化到RDB文件中；当redis再次启动时这个用来判断是否过期的时间戳并不会发生变化，一旦当前的时间戳超过这个保存的时间戳，键就过期了 被动过期：在一个键过期后，当试图访问已经过期的键时；redis会立即从内存中删除","categories":[{"name":"Redis","slug":"Redis","permalink":"https://hqd8080.github.io/categories/Redis/"}],"tags":[{"name":"redis","slug":"redis","permalink":"https://hqd8080.github.io/tags/redis/"}]},{"title":"Redis列表类型（list）的使用","slug":"redis/redis-list","date":"2020-05-22T12:40:28.000Z","updated":"2021-09-01T16:22:53.834Z","comments":true,"path":"2020/05/22/redis/redis-list/","link":"","permalink":"https://hqd8080.github.io/2020/05/22/redis/redis-list/","excerpt":"","text":"Redis列表类型（list）的使用 12// 从左边插入列表127.0.0.1:6379&gt; lpush shanghai &quot;长宁区&quot; &quot;徐汇区&quot; &quot;静安区&quot; &quot;浦东区&quot; &quot;黄浦区&quot; &quot;普陀区&quot; 12// 列表打印127.0.0.1:6379&gt; lrange shanghai 0 -1 12// 从右边插入列表127.0.0.1:6379&gt; rpush shanghai &quot;songjiangqu&quot; 12// songjiangqu之后插入&quot;嘉定区&quot;127.0.0.1:6379&gt; linsert shanghai after &quot;songjiangqu&quot; &quot;嘉定区&quot; 123// 使用索引获取值127.0.0.1:6379&gt; lindex shanghai 6&quot;songjiangqu&quot; 12// 仅在列表存在时才插入列表 lpushx rpushx,列表不存在返回(empty array)127.0.0.1:6379&gt; lpushx shanghai &quot;test&quot; 12345// lpop，rpop移除列表的元素127.0.0.1:6379&gt; lpop shanghai // 从左边移除一个元素127.0.0.1:6379&gt; lrange shanghai 0 -1127.0.0.1:6379&gt; rpop shanghai // 从右边移除一个元素127.0.0.1:6379&gt; lrange shanghai 0 -1 12// 阻塞版本blpop，brpop 阻塞版本会将客户端阻塞，当设置超时时间为0时表示永久等待127.0.0.1:6379&gt; brpop job_queue 0","categories":[{"name":"Redis","slug":"Redis","permalink":"https://hqd8080.github.io/categories/Redis/"}],"tags":[{"name":"redis","slug":"redis","permalink":"https://hqd8080.github.io/tags/redis/"}]},{"title":"Redis的持久化","slug":"redis/redis-rdb-aof","date":"2020-05-22T12:40:28.000Z","updated":"2021-09-01T16:43:12.264Z","comments":true,"path":"2020/05/22/redis/redis-rdb-aof/","link":"","permalink":"https://hqd8080.github.io/2020/05/22/redis/redis-rdb-aof/","excerpt":"","text":"Redis的持久化 redis有两种数据持久化类型：RDB和AOF RDB可以看做是某个时间点上的快照，非常适合于备份和灾难恢复（仅包含某个时间点上的redis数据快照）AOF（append-only file）则是一个写入操作的日志，将在服务器启动时被重放（只记录redis写入的追加式日志文件，因为每个写入命令都会被追加到文件中，所以AOF的数据一致性比RDB更高） 在一个正在运行的redis实例上启用AOF持久化 1127.0.0.1:6379&gt; config set appendonly yes 在配置文件中开启 1cat conf/redis.conf |grep &quot;^appendonly yes&quot;","categories":[{"name":"Redis","slug":"Redis","permalink":"https://hqd8080.github.io/categories/Redis/"}],"tags":[{"name":"redis","slug":"redis","permalink":"https://hqd8080.github.io/tags/redis/"}]},{"title":"Redis集合类型（set）的使用","slug":"redis/redis-set","date":"2020-05-22T12:40:28.000Z","updated":"2021-09-01T16:31:30.319Z","comments":true,"path":"2020/05/22/redis/redis-set/","link":"","permalink":"https://hqd8080.github.io/2020/05/22/redis/redis-set/","excerpt":"","text":"Redis集合类型（set）的使用 集合类型，唯一，无序对象，应用场景：求差集，交集，并集 12// 添加进集合，sadd127.0.0.1:6379&gt; sadd &quot;develop_language&quot; &quot;Go&quot; &quot;PHP&quot; &quot;Python&quot; &quot;Java&quot; &quot;C++&quot; 12// 集合中成员数量，scard127.0.0.1:6379&gt; scard develop_language 12// 测试元素是不是在集合中，sismember127.0.0.1:6379&gt; sismember develop_language &quot;Go&quot; 12// 删除集合的一个元素,srem127.0.0.1:6379&gt; srem develop_language &quot;C++&quot; 123456// 列出集合中的所有元素，smembers127.0.0.1:6379&gt; smembers develop_language1) &quot;Python&quot;2) &quot;PHP&quot;3) &quot;Go&quot;4) &quot;Java&quot; 1234// 计算两个集合的并集，sunion（只返回结果），sunionstort（将结果存储到一个指定的键中）// 计算交集127.0.0.1:6379&gt; sinter &quot;集合1&quot; &quot;集合2&quot;127.0.0.1:6379&gt; sinterstore &quot;集合1&quot; &quot;集合2&quot;","categories":[{"name":"Redis","slug":"Redis","permalink":"https://hqd8080.github.io/categories/Redis/"}],"tags":[{"name":"redis","slug":"redis","permalink":"https://hqd8080.github.io/tags/redis/"}]},{"title":"Redis字符串类型（string）的使用","slug":"redis/redis-string","date":"2020-05-22T12:40:28.000Z","updated":"2021-09-01T16:18:43.479Z","comments":true,"path":"2020/05/22/redis/redis-string/","link":"","permalink":"https://hqd8080.github.io/2020/05/22/redis/redis-string/","excerpt":"","text":"Redis字符串类型（string）的使用 123// 设置key，value127.0.0.1:6379&gt; set address &quot;shanghai china&quot; 12// 获取key对应的value127.0.0.1:6379&gt; get address // &quot;shanghai china&quot; 12// 返回字符串长度，key不存在返回0127.0.0.1:6379&gt; strlen address // (integer) 14 12// 字符串追加，拼接127.0.0.1:6379&gt; append address &quot; chang ning&quot; // &quot;shanghai china chang ning&quot; 12// 仅在key不存在时，才设置键的值，键已经存在返回0127.0.0.1:6379&gt; setnx address &quot;test&quot; 1234567// mset，mget原子性的一次性的设置多个键值127.0.0.1:6379&gt; mset &quot;pudong&quot; &quot;001&quot; &quot;changning&quot; &quot;002&quot; &quot;xuhui&quot; &quot;003&quot;127.0.0.1:6379&gt; mget &quot;pudong&quot; &quot;changning&quot; &quot;xuhui&quot;1) &quot;001&quot;2) &quot;002&quot;3) &quot;003&quot;","categories":[{"name":"Redis","slug":"Redis","permalink":"https://hqd8080.github.io/categories/Redis/"}],"tags":[{"name":"redis","slug":"redis","permalink":"https://hqd8080.github.io/tags/redis/"}]},{"title":"Redis有序集合类型（zset）的使用","slug":"redis/redis-zset","date":"2020-05-22T12:40:28.000Z","updated":"2021-09-01T16:35:06.418Z","comments":true,"path":"2020/05/22/redis/redis-zset/","link":"","permalink":"https://hqd8080.github.io/2020/05/22/redis/redis-zset/","excerpt":"","text":"Redis有序集合类型（zset）的使用 12// 添加进有序集合127.0.0.1:6379&gt; zadd develop:language 100 &quot;Go&quot; 88 &quot;PHP&quot; 80 &quot;Python&quot; 60 &quot;Java&quot; 55 &quot;C++&quot; 123456789101112// 获取排名，从大到小，zrevrange127.0.0.1:6379&gt; zrevrange develop:language 0 -1 withscores1) &quot;Go&quot;2) &quot;100&quot;3) &quot;PHP&quot;4) &quot;88&quot;5) &quot;Python&quot;6) &quot;80&quot;7) &quot;Java&quot;8) &quot;60&quot;9) &quot;C++&quot;10) &quot;55&quot; 12// 集合的元素scores操作加1127.0.0.1:6379&gt; zincrby develop:language 1 &quot;Go&quot; 12// 只查看某个有序集合的元素排名，zrevrange127.0.0.1:6379&gt; zrevrange develop:language &quot;Go&quot; 12// 只查看某个有序集合的数值, zscore127.0.0.1:6379&gt; zscore develop:language &quot;Go&quot; 12345678910111213141516// 添加新的有序集合成员127.0.0.1:6379&gt; zadd develop:language nx 50 &quot;Rust&quot;// 查看127.0.0.1:6379&gt; zrevrange develop:language 0 -1 withscores1) &quot;Go&quot;2) &quot;101&quot;3) &quot;PHP&quot;4) &quot;88&quot;5) &quot;Python&quot;6) &quot;80&quot;7) &quot;Java&quot;8) &quot;60&quot;9) &quot;C++&quot;10) &quot;55&quot;11) &quot;Rust&quot;12) &quot;50&quot;","categories":[{"name":"Redis","slug":"Redis","permalink":"https://hqd8080.github.io/categories/Redis/"}],"tags":[{"name":"redis","slug":"redis","permalink":"https://hqd8080.github.io/tags/redis/"}]},{"title":"Go语言解析复杂格式json数据（simplejson包）","slug":"golang/go-simplejson","date":"2020-05-14T13:03:20.000Z","updated":"2022-02-17T09:21:34.028Z","comments":true,"path":"2020/05/14/golang/go-simplejson/","link":"","permalink":"https://hqd8080.github.io/2020/05/14/golang/go-simplejson/","excerpt":"","text":"Go语言使用第三方包simplejson包，解析复杂结构的json数据实例request.json&#123; &quot;requestType&quot;: &quot;services.UserLoginRequest&quot;, &quot;requestStream&quot;: false, &quot;messageTypes&quot;: &#123; &quot;google.protobuf.Timestamp&quot;: [&#123; &quot;name&quot;: &quot;seconds&quot;, &quot;protoName&quot;: &quot;seconds&quot;, &quot;type&quot;: &quot;int64&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;0&quot; &#125;, &#123; &quot;name&quot;: &quot;nanos&quot;, &quot;protoName&quot;: &quot;nanos&quot;, &quot;type&quot;: &quot;int32&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: 0 &#125;], &quot;services.UserLoginRequest&quot;: [&#123; &quot;name&quot;: &quot;userId&quot;, &quot;protoName&quot;: &quot;user_id&quot;, &quot;type&quot;: &quot;int64&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;100&quot;, &quot;isExpand&quot;: false, &quot;children&quot;: [], &quot;level&quot;: 1, &quot;operator&quot;: &quot;&quot;, &quot;bLeft&quot;: 34, &quot;id&quot;: 16947 &#125;, &#123; &quot;name&quot;: &quot;userName&quot;, &quot;protoName&quot;: &quot;user_name&quot;, &quot;type&quot;: &quot;string&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;zhangsan&quot;, &quot;isExpand&quot;: false, &quot;children&quot;: [], &quot;level&quot;: 1, &quot;operator&quot;: &quot;&quot;, &quot;bLeft&quot;: 34, &quot;id&quot;: 14965 &#125;, &#123; &quot;name&quot;: &quot;userNickname&quot;, &quot;protoName&quot;: &quot;user_nickname&quot;, &quot;type&quot;: &quot;string&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;xiaoming&quot;, &quot;isExpand&quot;: false, &quot;children&quot;: [], &quot;level&quot;: 1, &quot;operator&quot;: &quot;&quot;, &quot;bLeft&quot;: 34, &quot;id&quot;: 15598 &#125;, &#123; &quot;name&quot;: &quot;userCountry&quot;, &quot;protoName&quot;: &quot;user_country&quot;, &quot;type&quot;: &quot;string&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;china&quot;, &quot;isExpand&quot;: false, &quot;children&quot;: [], &quot;level&quot;: 1, &quot;operator&quot;: &quot;&quot;, &quot;bLeft&quot;: 34, &quot;id&quot;: 48380 &#125;, &#123; &quot;name&quot;: &quot;userGender&quot;, &quot;protoName&quot;: &quot;user_gender&quot;, &quot;type&quot;: &quot;int32&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;1&quot;, &quot;isExpand&quot;: false, &quot;children&quot;: [], &quot;level&quot;: 1, &quot;operator&quot;: &quot;&quot;, &quot;bLeft&quot;: 34, &quot;id&quot;: 67007 &#125;, &#123; &quot;name&quot;: &quot;userCredits&quot;, &quot;protoName&quot;: &quot;user_credits&quot;, &quot;type&quot;: &quot;double&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;100.0&quot;, &quot;isExpand&quot;: false, &quot;children&quot;: [], &quot;level&quot;: 1, &quot;operator&quot;: &quot;&quot;, &quot;bLeft&quot;: 34, &quot;id&quot;: 91280 &#125;, &#123; &quot;name&quot;: &quot;isAdmin&quot;, &quot;protoName&quot;: &quot;is_admin&quot;, &quot;type&quot;: &quot;bool&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: true, &quot;isExpand&quot;: false, &quot;children&quot;: [], &quot;level&quot;: 1, &quot;operator&quot;: &quot;&quot;, &quot;bLeft&quot;: 34, &quot;id&quot;: 85770 &#125;, &#123; &quot;name&quot;: &quot;authCode&quot;, &quot;protoName&quot;: &quot;auth_code&quot;, &quot;type&quot;: &quot;bytes&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;123&quot;, &quot;isExpand&quot;: false, &quot;children&quot;: [], &quot;level&quot;: 1, &quot;operator&quot;: &quot;&quot;, &quot;bLeft&quot;: 34, &quot;id&quot;: 36294 &#125;, &#123; &quot;name&quot;: &quot;userBalance&quot;, &quot;protoName&quot;: &quot;user_balance&quot;, &quot;type&quot;: &quot;float&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;200.00&quot;, &quot;isExpand&quot;: false, &quot;children&quot;: [], &quot;level&quot;: 1, &quot;operator&quot;: &quot;&quot;, &quot;bLeft&quot;: 34, &quot;id&quot;: 94647 &#125;, &#123; &quot;name&quot;: &quot;userHobby&quot;, &quot;protoName&quot;: &quot;user_hobby&quot;, &quot;type&quot;: &quot;services.UserLoginRequest.Hobby&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: true, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;music&quot;, &quot;isExpand&quot;: false, &quot;children&quot;: [], &quot;level&quot;: 1, &quot;operator&quot;: &quot;&quot;, &quot;bLeft&quot;: 34, &quot;id&quot;: 91930 &#125;, &#123; &quot;name&quot;: &quot;luckyNumbers&quot;, &quot;protoName&quot;: &quot;lucky_numbers&quot;, &quot;type&quot;: &quot;int32&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: true, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;2&quot;, &quot;isExpand&quot;: true, &quot;children&quot;: [&#123; &quot;type&quot;: &quot;int32&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;4&quot;, &quot;value&quot;: 1, &quot;parentType&quot;: &quot;int32&quot;, &quot;id&quot;: 77877, &quot;isExpand&quot;: true, &quot;children&quot;: [], &quot;level&quot;: 2, &quot;operator&quot;: &quot;&quot;, &quot;bLeft&quot;: 34 &#125;, &#123; &quot;type&quot;: &quot;int32&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;6&quot;, &quot;value&quot;: 1, &quot;parentType&quot;: &quot;int32&quot;, &quot;id&quot;: 21349, &quot;isExpand&quot;: true, &quot;children&quot;: [], &quot;level&quot;: 2, &quot;operator&quot;: &quot;&quot;, &quot;bLeft&quot;: 34 &#125;], &quot;level&quot;: 1, &quot;operator&quot;: &quot;&quot;, &quot;bLeft&quot;: 34, &quot;id&quot;: 51439 &#125;, &#123; &quot;name&quot;: &quot;userEmail&quot;, &quot;protoName&quot;: &quot;user_email&quot;, &quot;type&quot;: &quot;services.UserLoginRequest.UserEmailEntry&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: true, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: true, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &#123;&#125;, &quot;isExpand&quot;: true, &quot;children&quot;: [&#123; &quot;id&quot;: 1600416010481, &quot;name&quot;: &quot;userEmail-0&quot;, &quot;parentType&quot;: &quot;object&quot;, &quot;flag&quot;: &quot;append&quot;, &quot;parentName&quot;: &quot;userEmail&quot;, &quot;children&quot;: [&#123; &quot;name&quot;: &quot;key&quot;, &quot;protoName&quot;: &quot;key&quot;, &quot;type&quot;: &quot;string&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;email001&quot;, &quot;value&quot;: &quot;&quot;, &quot;id&quot;: 35094, &quot;parentName&quot;: &quot;userEmail&quot;, &quot;isExpand&quot;: true, &quot;children&quot;: [], &quot;level&quot;: 3, &quot;bLeft&quot;: 50, &quot;operator&quot;: &quot;&quot; &#125;, &#123; &quot;name&quot;: &quot;value&quot;, &quot;protoName&quot;: &quot;value&quot;, &quot;type&quot;: &quot;string&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;001&quot;, &quot;value&quot;: &quot;&quot;, &quot;id&quot;: 11786, &quot;parentName&quot;: &quot;userEmail&quot;, &quot;isExpand&quot;: true, &quot;children&quot;: [], &quot;level&quot;: 3, &quot;bLeft&quot;: 50, &quot;operator&quot;: &quot;&quot; &#125;], &quot;isExpand&quot;: true, &quot;level&quot;: 2, &quot;operator&quot;: &quot;&quot;, &quot;bLeft&quot;: 34 &#125;, &#123; &quot;id&quot;: 1600416021145, &quot;name&quot;: &quot;userEmail-1&quot;, &quot;parentType&quot;: &quot;object&quot;, &quot;flag&quot;: &quot;append&quot;, &quot;parentName&quot;: &quot;userEmail&quot;, &quot;children&quot;: [&#123; &quot;name&quot;: &quot;key&quot;, &quot;protoName&quot;: &quot;key&quot;, &quot;type&quot;: &quot;string&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;email002&quot;, &quot;value&quot;: &quot;&quot;, &quot;id&quot;: 49850, &quot;parentName&quot;: &quot;userEmail&quot;, &quot;isExpand&quot;: true, &quot;children&quot;: [], &quot;level&quot;: 3, &quot;bLeft&quot;: 50, &quot;operator&quot;: &quot;&quot; &#125;, &#123; &quot;name&quot;: &quot;value&quot;, &quot;protoName&quot;: &quot;value&quot;, &quot;type&quot;: &quot;string&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;002&quot;, &quot;value&quot;: &quot;&quot;, &quot;id&quot;: 82232, &quot;parentName&quot;: &quot;userEmail&quot;, &quot;isExpand&quot;: true, &quot;children&quot;: [], &quot;level&quot;: 3, &quot;bLeft&quot;: 50, &quot;operator&quot;: &quot;&quot; &#125;], &quot;isExpand&quot;: true, &quot;level&quot;: 2, &quot;operator&quot;: &quot;&quot;, &quot;bLeft&quot;: 34 &#125;], &quot;level&quot;: 1, &quot;operator&quot;: &quot;&quot;, &quot;bLeft&quot;: 34, &quot;id&quot;: 49491 &#125;, &#123; &quot;name&quot;: &quot;userWeight&quot;, &quot;protoName&quot;: &quot;user_weight&quot;, &quot;type&quot;: &quot;services.UserLoginRequest.UserWeightEntry&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: true, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: true, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &#123;&#125;, &quot;isExpand&quot;: true, &quot;children&quot;: [&#123; &quot;id&quot;: 1600416029666, &quot;name&quot;: &quot;userWeight-0&quot;, &quot;parentType&quot;: &quot;object&quot;, &quot;flag&quot;: &quot;append&quot;, &quot;parentName&quot;: &quot;userWeight&quot;, &quot;children&quot;: [&#123; &quot;name&quot;: &quot;key&quot;, &quot;protoName&quot;: &quot;key&quot;, &quot;type&quot;: &quot;string&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;weight1&quot;, &quot;value&quot;: &quot;&quot;, &quot;id&quot;: 1295, &quot;parentName&quot;: &quot;userWeight&quot;, &quot;isExpand&quot;: true, &quot;children&quot;: [], &quot;level&quot;: 3, &quot;bLeft&quot;: 50, &quot;operator&quot;: &quot;&quot; &#125;, &#123; &quot;name&quot;: &quot;value&quot;, &quot;protoName&quot;: &quot;value&quot;, &quot;type&quot;: &quot;int32&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;10&quot;, &quot;value&quot;: 0, &quot;id&quot;: 3455, &quot;parentName&quot;: &quot;userWeight&quot;, &quot;isExpand&quot;: true, &quot;children&quot;: [], &quot;level&quot;: 3, &quot;bLeft&quot;: 50, &quot;operator&quot;: &quot;&quot; &#125;], &quot;isExpand&quot;: true, &quot;level&quot;: 2, &quot;operator&quot;: &quot;&quot;, &quot;bLeft&quot;: 34 &#125;, &#123; &quot;id&quot;: 1600416048040, &quot;name&quot;: &quot;userWeight-1&quot;, &quot;parentType&quot;: &quot;object&quot;, &quot;flag&quot;: &quot;append&quot;, &quot;parentName&quot;: &quot;userWeight&quot;, &quot;children&quot;: [&#123; &quot;name&quot;: &quot;key&quot;, &quot;protoName&quot;: &quot;key&quot;, &quot;type&quot;: &quot;string&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;weight2&quot;, &quot;value&quot;: &quot;&quot;, &quot;id&quot;: 86596, &quot;parentName&quot;: &quot;userWeight&quot;, &quot;isExpand&quot;: true, &quot;children&quot;: [], &quot;level&quot;: 3, &quot;bLeft&quot;: 50, &quot;operator&quot;: &quot;&quot; &#125;, &#123; &quot;name&quot;: &quot;value&quot;, &quot;protoName&quot;: &quot;value&quot;, &quot;type&quot;: &quot;int32&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;10&quot;, &quot;value&quot;: 0, &quot;id&quot;: 77749, &quot;parentName&quot;: &quot;userWeight&quot;, &quot;isExpand&quot;: true, &quot;children&quot;: [], &quot;level&quot;: 3, &quot;bLeft&quot;: 50, &quot;operator&quot;: &quot;&quot; &#125;], &quot;isExpand&quot;: true, &quot;level&quot;: 2, &quot;operator&quot;: &quot;&quot;, &quot;bLeft&quot;: 34 &#125;], &quot;level&quot;: 1, &quot;operator&quot;: &quot;&quot;, &quot;bLeft&quot;: 34, &quot;id&quot;: 32487 &#125;, &#123; &quot;name&quot;: &quot;userNum&quot;, &quot;protoName&quot;: &quot;user_num&quot;, &quot;type&quot;: &quot;services.UserLoginRequest.UserNumEntry&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: true, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: true, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &#123;&#125;, &quot;isExpand&quot;: true, &quot;children&quot;: [&#123; &quot;id&quot;: 1600416067640, &quot;name&quot;: &quot;userNum-0&quot;, &quot;parentType&quot;: &quot;object&quot;, &quot;flag&quot;: &quot;append&quot;, &quot;parentName&quot;: &quot;userNum&quot;, &quot;children&quot;: [&#123; &quot;name&quot;: &quot;key&quot;, &quot;protoName&quot;: &quot;key&quot;, &quot;type&quot;: &quot;string&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;1001&quot;, &quot;value&quot;: &quot;&quot;, &quot;id&quot;: 26160, &quot;parentName&quot;: &quot;userNum&quot;, &quot;isExpand&quot;: true, &quot;children&quot;: [], &quot;level&quot;: 3, &quot;bLeft&quot;: 50, &quot;operator&quot;: &quot;&quot; &#125;, &#123; &quot;name&quot;: &quot;phoneNumber&quot;, &quot;protoName&quot;: &quot;phone_number&quot;, &quot;type&quot;: &quot;string&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;1001001&quot;, &quot;id&quot;: 63268, &quot;parentName&quot;: &quot;userNum&quot;, &quot;isExpand&quot;: true, &quot;children&quot;: [], &quot;level&quot;: 3, &quot;bLeft&quot;: 50, &quot;operator&quot;: &quot;&quot; &#125;, &#123; &quot;name&quot;: &quot;phoneType&quot;, &quot;protoName&quot;: &quot;phone_type&quot;, &quot;type&quot;: &quot;services.UserLoginRequest.PhoneType&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: true, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;mobile&quot;, &quot;id&quot;: 15049, &quot;parentName&quot;: &quot;userNum&quot;, &quot;isExpand&quot;: true, &quot;children&quot;: [], &quot;level&quot;: 3, &quot;bLeft&quot;: 50, &quot;operator&quot;: &quot;&quot; &#125;], &quot;isExpand&quot;: true, &quot;level&quot;: 2, &quot;operator&quot;: &quot;&quot;, &quot;bLeft&quot;: 34 &#125;, &#123; &quot;id&quot;: 1600416072968, &quot;name&quot;: &quot;userNum-1&quot;, &quot;parentType&quot;: &quot;object&quot;, &quot;flag&quot;: &quot;append&quot;, &quot;parentName&quot;: &quot;userNum&quot;, &quot;children&quot;: [&#123; &quot;name&quot;: &quot;key&quot;, &quot;protoName&quot;: &quot;key&quot;, &quot;type&quot;: &quot;string&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;1002&quot;, &quot;value&quot;: &quot;&quot;, &quot;id&quot;: 4560, &quot;parentName&quot;: &quot;userNum&quot;, &quot;isExpand&quot;: true, &quot;children&quot;: [], &quot;level&quot;: 3, &quot;bLeft&quot;: 50, &quot;operator&quot;: &quot;&quot; &#125;, &#123; &quot;name&quot;: &quot;phoneNumber&quot;, &quot;protoName&quot;: &quot;phone_number&quot;, &quot;type&quot;: &quot;string&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;1002002&quot;, &quot;id&quot;: 97300, &quot;parentName&quot;: &quot;userNum&quot;, &quot;isExpand&quot;: true, &quot;children&quot;: [], &quot;level&quot;: 3, &quot;bLeft&quot;: 50, &quot;operator&quot;: &quot;&quot; &#125;, &#123; &quot;name&quot;: &quot;phoneType&quot;, &quot;protoName&quot;: &quot;phone_type&quot;, &quot;type&quot;: &quot;services.UserLoginRequest.PhoneType&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: true, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;mobile&quot;, &quot;id&quot;: 52444, &quot;parentName&quot;: &quot;userNum&quot;, &quot;isExpand&quot;: true, &quot;children&quot;: [], &quot;level&quot;: 3, &quot;bLeft&quot;: 50, &quot;operator&quot;: &quot;&quot; &#125;], &quot;isExpand&quot;: true, &quot;level&quot;: 2, &quot;operator&quot;: &quot;&quot;, &quot;bLeft&quot;: 34 &#125;], &quot;level&quot;: 1, &quot;operator&quot;: &quot;&quot;, &quot;bLeft&quot;: 34, &quot;id&quot;: 91376 &#125;, &#123; &quot;name&quot;: &quot;loginStatus&quot;, &quot;protoName&quot;: &quot;login_status&quot;, &quot;type&quot;: &quot;services.LoginStatus&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: true, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;success&quot;, &quot;isExpand&quot;: false, &quot;children&quot;: [], &quot;level&quot;: 1, &quot;operator&quot;: &quot;&quot;, &quot;bLeft&quot;: 34, &quot;id&quot;: 43622 &#125;, &#123; &quot;name&quot;: &quot;phones&quot;, &quot;protoName&quot;: &quot;phones&quot;, &quot;type&quot;: &quot;services.UserLoginRequest.PhoneNumber&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: true, &quot;isEnum&quot;: false, &quot;isArray&quot;: true, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: null, &quot;isExpand&quot;: true, &quot;children&quot;: [&#123; &quot;id&quot;: 1600416104944, &quot;name&quot;: &quot;phones-0&quot;, &quot;parentType&quot;: &quot;array&quot;, &quot;flag&quot;: &quot;append&quot;, &quot;parentName&quot;: &quot;phones&quot;, &quot;children&quot;: [&#123; &quot;name&quot;: &quot;phoneNumber&quot;, &quot;protoName&quot;: &quot;phone_number&quot;, &quot;type&quot;: &quot;string&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;12345678900&quot;, &quot;value&quot;: &quot;&quot;, &quot;id&quot;: 68179, &quot;parentName&quot;: &quot;phones&quot;, &quot;isExpand&quot;: true, &quot;children&quot;: [], &quot;level&quot;: 3, &quot;bLeft&quot;: 50, &quot;operator&quot;: &quot;&quot; &#125;, &#123; &quot;name&quot;: &quot;phoneType&quot;, &quot;protoName&quot;: &quot;phone_type&quot;, &quot;type&quot;: &quot;services.UserLoginRequest.PhoneType&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: true, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;mobile&quot;, &quot;value&quot;: &quot;mobile&quot;, &quot;id&quot;: 49819, &quot;parentName&quot;: &quot;phones&quot;, &quot;isExpand&quot;: true, &quot;children&quot;: [], &quot;level&quot;: 3, &quot;bLeft&quot;: 50, &quot;operator&quot;: &quot;&quot; &#125;], &quot;isExpand&quot;: true, &quot;level&quot;: 2, &quot;operator&quot;: &quot;&quot;, &quot;bLeft&quot;: 34 &#125;, &#123; &quot;id&quot;: 1600416117567, &quot;name&quot;: &quot;phones-1&quot;, &quot;parentType&quot;: &quot;array&quot;, &quot;flag&quot;: &quot;append&quot;, &quot;parentName&quot;: &quot;phones&quot;, &quot;children&quot;: [&#123; &quot;name&quot;: &quot;phoneNumber&quot;, &quot;protoName&quot;: &quot;phone_number&quot;, &quot;type&quot;: &quot;string&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;12345678911&quot;, &quot;value&quot;: &quot;&quot;, &quot;id&quot;: 4276, &quot;parentName&quot;: &quot;phones&quot;, &quot;isExpand&quot;: true, &quot;children&quot;: [], &quot;level&quot;: 3, &quot;bLeft&quot;: 50, &quot;operator&quot;: &quot;&quot; &#125;, &#123; &quot;name&quot;: &quot;phoneType&quot;, &quot;protoName&quot;: &quot;phone_type&quot;, &quot;type&quot;: &quot;services.UserLoginRequest.PhoneType&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: true, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;mobile&quot;, &quot;value&quot;: &quot;mobile&quot;, &quot;id&quot;: 62179, &quot;parentName&quot;: &quot;phones&quot;, &quot;isExpand&quot;: true, &quot;children&quot;: [], &quot;level&quot;: 3, &quot;bLeft&quot;: 50, &quot;operator&quot;: &quot;&quot; &#125;], &quot;isExpand&quot;: true, &quot;level&quot;: 2, &quot;operator&quot;: &quot;&quot;, &quot;bLeft&quot;: 34 &#125;], &quot;level&quot;: 1, &quot;operator&quot;: &quot;&quot;, &quot;bLeft&quot;: 34, &quot;id&quot;: 16793 &#125;, &#123; &quot;name&quot;: &quot;lastUpdateDate&quot;, &quot;protoName&quot;: &quot;last_update_date&quot;, &quot;type&quot;: &quot;google.protobuf.Timestamp&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: true, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: null, &quot;isExpand&quot;: true, &quot;children&quot;: [&#123; &quot;name&quot;: &quot;seconds&quot;, &quot;protoName&quot;: &quot;seconds&quot;, &quot;type&quot;: &quot;int64&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;123&quot;, &quot;value&quot;: &quot;0&quot;, &quot;id&quot;: 32046, &quot;parentName&quot;: &quot;lastUpdateDate&quot;, &quot;isExpand&quot;: true, &quot;children&quot;: [], &quot;level&quot;: 2, &quot;bLeft&quot;: 34, &quot;operator&quot;: &quot;&quot; &#125;, &#123; &quot;name&quot;: &quot;nanos&quot;, &quot;protoName&quot;: &quot;nanos&quot;, &quot;type&quot;: &quot;int32&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;222&quot;, &quot;value&quot;: 0, &quot;id&quot;: 27909, &quot;parentName&quot;: &quot;lastUpdateDate&quot;, &quot;isExpand&quot;: true, &quot;children&quot;: [], &quot;level&quot;: 2, &quot;bLeft&quot;: 34, &quot;operator&quot;: &quot;&quot; &#125;], &quot;level&quot;: 1, &quot;operator&quot;: &quot;&quot;, &quot;bLeft&quot;: 34, &quot;id&quot;: 60223 &#125;], &quot;services.UserLoginRequest.PhoneNumber&quot;: [&#123; &quot;name&quot;: &quot;phoneNumber&quot;, &quot;protoName&quot;: &quot;phone_number&quot;, &quot;type&quot;: &quot;string&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;&quot; &#125;, &#123; &quot;name&quot;: &quot;phoneType&quot;, &quot;protoName&quot;: &quot;phone_type&quot;, &quot;type&quot;: &quot;services.UserLoginRequest.PhoneType&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: true, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;mobile&quot; &#125;], &quot;services.UserLoginRequest.UserEmailEntry&quot;: [&#123; &quot;name&quot;: &quot;key&quot;, &quot;protoName&quot;: &quot;key&quot;, &quot;type&quot;: &quot;string&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;&quot; &#125;, &#123; &quot;name&quot;: &quot;value&quot;, &quot;protoName&quot;: &quot;value&quot;, &quot;type&quot;: &quot;string&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;&quot; &#125;], &quot;services.UserLoginRequest.UserNumEntry&quot;: [&#123; &quot;name&quot;: &quot;key&quot;, &quot;protoName&quot;: &quot;key&quot;, &quot;type&quot;: &quot;string&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;&quot; &#125;, &#123; &quot;name&quot;: &quot;value&quot;, &quot;protoName&quot;: &quot;value&quot;, &quot;type&quot;: &quot;services.UserLoginRequest.PhoneNumber&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: true, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: null &#125;], &quot;services.UserLoginRequest.UserWeightEntry&quot;: [&#123; &quot;name&quot;: &quot;key&quot;, &quot;protoName&quot;: &quot;key&quot;, &quot;type&quot;: &quot;string&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: &quot;&quot; &#125;, &#123; &quot;name&quot;: &quot;value&quot;, &quot;protoName&quot;: &quot;value&quot;, &quot;type&quot;: &quot;int32&quot;, &quot;oneOfFields&quot;: null, &quot;isMessage&quot;: false, &quot;isEnum&quot;: false, &quot;isArray&quot;: false, &quot;isMap&quot;: false, &quot;isRequired&quot;: false, &quot;defaultVal&quot;: 0 &#125;] &#125;, &quot;enumTypes&quot;: &#123; &quot;services.LoginStatus&quot;: [&#123; &quot;num&quot;: 0, &quot;name&quot;: &quot;success&quot; &#125;, &#123; &quot;num&quot;: 1, &quot;name&quot;: &quot;failed&quot; &#125;, &#123; &quot;num&quot;: 2, &quot;name&quot;: &quot;error&quot; &#125;], &quot;services.UserLoginRequest.Hobby&quot;: [&#123; &quot;num&quot;: 0, &quot;name&quot;: &quot;music&quot; &#125;, &#123; &quot;num&quot;: 1, &quot;name&quot;: &quot;basketball&quot; &#125;, &#123; &quot;num&quot;: 2, &quot;name&quot;: &quot;tour&quot; &#125;], &quot;services.UserLoginRequest.PhoneType&quot;: [&#123; &quot;num&quot;: 0, &quot;name&quot;: &quot;mobile&quot; &#125;, &#123; &quot;num&quot;: 1, &quot;name&quot;: &quot;home&quot; &#125;, &#123; &quot;num&quot;: 2, &quot;name&quot;: &quot;work&quot; &#125;] &#125;&#125; parse_test.go123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146/*** @author : hqd8080* @description : json转换* @date : 2021-05-15 21:56 */package testimport ( &quot;io/ioutil&quot; &quot;strconv&quot; &quot;testing&quot; &quot;time&quot; &quot;github.com/bitly/go-simplejson&quot;)func TestParseJSON(t *testing.T) &#123; data, err := ioutil.ReadFile(&quot;./request.json&quot;) if err != nil &#123; t.Log(err) &#125; js, err := simplejson.NewJson(data) requestType := js.Get(&quot;requestType&quot;).MustString() messageType := js.Get(&quot;messageTypes&quot;).Get(requestType) t.Log(&quot;count:&quot;, len(messageType.MustArray())) result := parseJSON(t, messageType) ret, err := result.EncodePretty() if err != nil &#123; t.Log(err) &#125; t.Log(string(ret))&#125;func parseJSON(t *testing.T, sourceJson *simplejson.Json) *simplejson.Json &#123; resultJson := simplejson.New() if len(sourceJson.MustArray()) &gt; 0 &#123; for i := 0; i &lt; len(sourceJson.MustArray()); i++ &#123; item := sourceJson.GetIndex(i) if len(item.Get(&quot;children&quot;).MustArray()) &gt; 0 &#123; if item.Get(&quot;isMap&quot;).MustBool() == true &#123; // t.Log(&quot;is map&quot;, item.Get(&quot;name&quot;).MustString()) data := parseJSON(t, item.Get(&quot;children&quot;)) dataMap, _ := data.Map() newMap := make(map[string]interface&#123;&#125;) for _, m := range dataMap &#123; mm, ok := m.(map[string]interface&#123;&#125;) if ok &#123; if len(mm) &gt; 2 &#123; nn := make(map[string]interface&#123;&#125;) for k, v := range mm &#123; if k == &quot;key&quot; &#123; continue &#125; nn[k] = v &#125; newMap[mm[&quot;key&quot;].(string)] = nn &#125; else &#123; newMap[mm[&quot;key&quot;].(string)] = mm[&quot;value&quot;] &#125; &#125; &#125; resultJson.Set(item.Get(&quot;name&quot;).MustString(), newMap) &#125; else if item.Get(&quot;isArray&quot;).MustBool() == true &#123; // t.Log(&quot;isArray:&quot;, item.Get(&quot;name&quot;).MustString()) data := parseJSON(t, item.Get(&quot;children&quot;)) dataMap, _ := data.Map() newMap := make([]interface&#123;&#125;, 0) for _, m := range dataMap &#123; arr, ok := m.([]interface&#123;&#125;) if ok &#123; for _, v := range arr &#123; newMap = append(newMap, v) &#125; &#125; mm, ok := m.(map[string]interface&#123;&#125;) if ok &#123; newMap = append(newMap, mm) &#125; &#125; resultJson.Set(item.Get(&quot;name&quot;).MustString(), newMap) &#125; else &#123; data := parseJSON(t, item.Get(&quot;children&quot;)) dataMap, _ := data.Map() resultJson.Set(item.Get(&quot;name&quot;).MustString(), dataMap) if item.Get(&quot;type&quot;).MustString() == &quot;google.protobuf.Timestamp&quot; &#123; // t.Log(item.Get(&quot;name&quot;).MustString()) var seconds, nanos int64 for _, t := range item.Get(&quot;children&quot;).MustArray() &#123; if row, ok := t.(map[string]interface&#123;&#125;); ok &#123; if field, ok := row[&quot;name&quot;].(string); ok &#123; switch field &#123; case &quot;seconds&quot;: seconds, _ = strconv.ParseInt(row[&quot;defaultVal&quot;].(string), 10, 64) case &quot;nanos&quot;: nanos, _ = strconv.ParseInt(row[&quot;defaultVal&quot;].(string), 10, 64) &#125; &#125; &#125; &#125; resultJson.Set(item.Get(&quot;name&quot;).MustString(), time.Unix(seconds, nanos).UTC().String()) &#125; &#125; &#125; else &#123; // t.Log(item.Get(&quot;name&quot;).MustString()) var defaultVal interface&#123;&#125; if item.Get(&quot;type&quot;).MustString() == &quot;bool&quot; &#123; defaultVal = item.Get(&quot;defaultVal&quot;).MustBool() &#125; else &#123; defaultVal = convertDefaultVal(item.Get(&quot;type&quot;).MustString(), item.Get(&quot;defaultVal&quot;).MustString()) &#125; if item.Get(&quot;name&quot;).MustString() == &quot;&quot; &#123; array := resultJson.Get(&quot;array&quot;).MustArray() array = append(array, defaultVal) resultJson.Set(&quot;array&quot;, array) &#125; else &#123; resultJson.Set(item.Get(&quot;name&quot;).MustString(), defaultVal) &#125; &#125; &#125; &#125; return resultJson&#125;func convertDefaultVal(t string, v string) interface&#123;&#125; &#123; switch t &#123; case &quot;int32&quot;, &quot;int64&quot;: i, _ := strconv.Atoi(v) return i case &quot;string&quot;: return v case &quot;bytes&quot;: return []byte(v) case &quot;float&quot;, &quot;double&quot;: f, _ := strconv.ParseFloat(v, 32) return f default: return v &#125;&#125;","categories":[{"name":"Golang","slug":"Golang","permalink":"https://hqd8080.github.io/categories/Golang/"}],"tags":[{"name":"golang","slug":"golang","permalink":"https://hqd8080.github.io/tags/golang/"}]},{"title":"Go语言结构体转字典实例","slug":"golang/go-struct-to-map","date":"2020-05-14T12:59:30.000Z","updated":"2022-02-17T09:21:33.990Z","comments":true,"path":"2020/05/14/golang/go-struct-to-map/","link":"","permalink":"https://hqd8080.github.io/2020/05/14/golang/go-struct-to-map/","excerpt":"","text":"结构体转字典实例1column := c.GetStrings(&quot;column&quot;) 1234567891011121314list, count, err := services.NewGcase(services.Slave()).CaseList(NewContext(), params, pageSize, pageNum) if err != nil &#123; c.ErrorCode(ErrCodeRet, http.StatusInternalServerError, &quot;get case list failed&quot;) &#125; res := make([]map[string]interface&#123;&#125;, 0) for _, item := range list &#123; res = append(res, structConvertMapByTag(item, &quot;json&quot;, column)) &#125; ret := make(map[string]interface&#123;&#125;, 0) ret[&quot;data&quot;] = res ret[&quot;count&quot;] = count c.Correct(ret) 123456789101112131415161718192021222324252627func structConvertMapByTag(obj interface&#123;&#125;, tagName string, col []string) map[string]interface&#123;&#125; &#123; t := reflect.TypeOf(obj) v := reflect.ValueOf(obj) var data = make(map[string]interface&#123;&#125;) for i := 0; i &lt; t.NumField(); i++ &#123; if len(col) &gt; 0 &#123; for _, item := range col &#123; tagName := t.Field(i).Tag.Get(tagName) if tagName == item &#123; fmt.Println(tagName) if tagName != &quot;&quot; &amp;&amp; tagName != &quot;-&quot; &#123; data[tagName] = v.Field(i).Interface() &#125; &#125; &#125; &#125; else &#123; // 不设置列的时候显示所有字段 tagName := t.Field(i).Tag.Get(tagName) if tagName != &quot;&quot; &amp;&amp; tagName != &quot;-&quot; &#123; data[tagName] = v.Field(i).Interface() &#125; &#125; &#125; return data&#125;","categories":[{"name":"Golang","slug":"Golang","permalink":"https://hqd8080.github.io/categories/Golang/"}],"tags":[{"name":"golang","slug":"golang","permalink":"https://hqd8080.github.io/tags/golang/"}]},{"title":"gRPC学习笔记","slug":"grpc/grpc","date":"2020-05-14T12:59:30.000Z","updated":"2021-11-29T03:53:37.642Z","comments":true,"path":"2020/05/14/grpc/grpc/","link":"","permalink":"https://hqd8080.github.io/2020/05/14/grpc/grpc/","excerpt":"","text":"gRPC学习笔记gRPC是一个高性能，开源，通用的RPC框架；由google开发；基于HTTP/2协议设计开发；采用protobuf数据序列化协议； 特点： 1.gRPC使用protobuf来定义服务，接口，和数据类型； 2.gRPC基于HTTP/2标准设计；高性能：双向流；头部压缩；多路复用等；对移动设备友好；节省带宽；降低TCP连接次数；提高CPU利用率； gRPC可以定义4种类型的服务接口： 1.一元RPC 2.服务端流RPC 3.客户端流式RPC 4.双向流式RPC 生成Go客户端和服务端代码： 1protoc --go_out=plugins=grpc:. pb/user.proto 使用流式编程的特点：向客户端或者服务器发送批量的数据。可以不用等待所有的消息全部接收后才开始响应；而是接收到第一条消息的时候及时响应;从而减少服务的延迟； 服务端采用流式响应：send客户端采用流式调用：recv 双向流RPC调用和客户端流RPC调用的区别：双向流：客户端发送一个请求数据后；立马就可以获取对应的服务端响应客户端流：会先将客户端的请求以流的形式发送完毕，再获取服务端的响应 HTTP/2（4大新特性） 1.二进制传输HTTP/2传输数据量的大幅减少,主要有两个原因：以二进制方式传输和Header压缩HTTP/2将请求和响应数据分割为更小的帧，并且它们采用二进制编码； 2.Header压缩(头部压缩) 3.多路复用在HTTP/2中引入了多路复用的技术。多路复用很好的解决了浏览器限制同一个域名下的请求数量的问题，同时也更容易实现全速传输，毕竟新开一个 TCP 连接都需要慢慢提升传输速度 4.Server Push（服务器推送）HTTP/2还在一定程度上改变了传统的“请求-应答”工作模式，服务器不再是完全被动地响应请求，也可以新建“流”主动向客户端发送消息。比如，在浏览器刚请求HTML的时候就提前把可能会用到的JS、CSS文件发给客户端，减少等待的延迟，这被称为”服务器推送”（ Server Push，也叫 Cache push） 例子：hello.proto 123456789101112131415161718192021syntax = &quot;proto3&quot;;package services;message HelloRequest &#123; string name = 1;&#125;message HelloReply &#123; string message = 1;&#125;service HelloService &#123; rpc SayHello(HelloRequest) returns (HelloReply);&#125;// client.gogrpc.Dial(*addr, grpc.WithInsecure())// server.gol, err := net.Listen(&quot;tcp&quot;, *addr)srv := grpc.NewServer() gRPC是基于HTTP/2协议设计开发（长连接），减少网络延迟，服务器维护连接状态，不用频繁的创建连接带来的开销。HTTP2 是一个全双工的流式协议, 服务端也可以主动 ping 客户端, 且服务端还会有一些检测连接可用性和控制客户端 ping 包频率的配置。gRPC 就是采用 HTTP2 来作为其基础通信模式的，所以默认的 gRPC 客户端都是长连接 2 长连接的优势（keepalive） 相比于短连接，长连接具有：较低的延时。由于跳过了三次握手的过程，长连接比短连接有更低的延迟。较低的带宽占用。由于不用为每个请求建立和关闭连接，长连接交换效率更高，网络带宽占用更少。较少的系统资源占用。server 为了维持连接，会为每个连接创建 socket，分配文件句柄， 在内存中分配读写 buffer，设置定时器进行 keepalive。因此更少的连接数也意味着更少的资源占用。 另外， gRPC 使用 HTTP/2.0 作为传输协议， 从该协议的设计来讲， 长连接也是更推荐的使用方式。","categories":[{"name":"gRPC","slug":"gRPC","permalink":"https://hqd8080.github.io/categories/gRPC/"}],"tags":[{"name":"golang","slug":"golang","permalink":"https://hqd8080.github.io/tags/golang/"},{"name":"gRPC","slug":"gRPC","permalink":"https://hqd8080.github.io/tags/gRPC/"}]},{"title":"Go语言计算字符串长度（包含汉字）","slug":"golang/go-runecountInstring","date":"2020-05-14T12:56:28.000Z","updated":"2022-02-17T09:21:34.025Z","comments":true,"path":"2020/05/14/golang/go-runecountInstring/","link":"","permalink":"https://hqd8080.github.io/2020/05/14/golang/go-runecountInstring/","excerpt":"","text":"Go语言计算字符串长度（包含汉字）中英文混合1234567891011package mainimport ( &quot;fmt&quot; &quot;unicode/utf8&quot;)func main() &#123; count := utf8.RuneCountInString(&quot;Go语言计算字符串长度,中英文&quot;) fmt.Print(count) &#125;","categories":[{"name":"Golang","slug":"Golang","permalink":"https://hqd8080.github.io/categories/Golang/"}],"tags":[{"name":"golang","slug":"golang","permalink":"https://hqd8080.github.io/tags/golang/"}]},{"title":"Go语言的GC垃圾回收","slug":"golang/go-gc","date":"2020-05-14T12:49:40.000Z","updated":"2022-02-17T09:21:34.016Z","comments":true,"path":"2020/05/14/golang/go-gc/","link":"","permalink":"https://hqd8080.github.io/2020/05/14/golang/go-gc/","excerpt":"","text":"Go语言的GC垃圾回收GC垃圾回收GC是一种自动管理内存的机制，垃圾回收器会尝试回收程序不再使用的对象和占用的内存在程序中设置GC的触发频率debug.SetGCPercent 垃圾回收算法： 1.引用计数 2.标记-清除 Go采用三色标记法 3.分代收集 引用计数：对每个对象维护一个引用计数，当引用该对象的对象被销毁时，引用计数减1，当引用计数器为0时回收该对象优点：对象可以很快被回收缺点：不能很好的处理循环引用，而且实时的维护引用计数也有一定的代价代表语言：php，python 标记-清除：从根变量开始遍历所有引用的对象，引用的对象标记为”被引用”，没有被标记的变量被回收优点：解决引用计数的缺点，不能很好的处理循环引用，而且实时的维护引用计数也有一定的代价的缺点缺点：暂停程序的执行代表语言：Go （三色标记法） 分代收集按照对象生命周期的长短划分不同的代空间，生命周期长的放入老年代，而短的放入新生代，不同代有不同的回收算法和回收频率优点：收回性能好缺点：算法复杂代表语言:java Go的垃圾回收Go垃圾回收的原理是，标记出哪些内存还在使用中，（即被引用到），哪些内存不在使用了（即未被引用），把未被引用的内存回收，以供后续内存分配时再使用缺点就是，不是实时的回收内存，而是暂停程序的执行去处理内存回收 三色标记法这里的三色是对应了垃圾回收过程中对象的三种状态1.灰色：对象还在标记队列中等待2.黑色：对象已经被标记(该对象不会在本次GC中被清理)3.白色：对象未被标记(该对象会在本次GC中被清理) Go的STWGo中的STW（Stop The World）就是停止所有的goroutine，专心做垃圾回收，待垃圾回收结束后，再恢复goroutine,STW的长短直接影响了程序的性能 垃圾回收优化1.写屏障就是让goroutine与GC同时运行的手段，GC过程中新分配的内存会被立即标记，即本轮不回收，下次GC时再确定 2.补助GC使用goroutine参与一部分的GC工作来提高性能 垃圾回收的触发时机1.内存分配量达到阈值触发GC每次内存分配时都会检查当前内存分配量是否已达到阈值，如果达到阈值则立即触发GC阈值 = 上次GC内存分配量 X 内存增长率内存增长率由环境变量GOGC控制，默认为100，即每当内存扩大一倍时启动GC 2.定期触发GC默认情况下，最长两分钟触发一次GC 3.手动触发使用 runtime.GC() 来手动触发GC主要用于GC的性能测试和统计 逃逸分析是指由编译器决定内存分配的位置，不需要程序员指定 在函数中申请一个新的对象：如果分配在栈中，则函数执行结束后，可自动将内存回收如果分配在堆中，则函数执行结束后可交给GC（垃圾回收）处理 1.逃逸策略在函数中申请新的对象时，编辑器会根据该对象是否被函数外部引用来决定是否逃逸：如果函数外部没有引用，则优先放在栈中如果函数外部存在引用，则必定存放在堆中 注意：对于仅在函数内部使用的变量，也有可能存放在堆中，比如内存过大，超过栈的存储能力 使用interface类型存在逃逸的可能（动态类型逃逸）闭包引用对象逃逸","categories":[{"name":"Golang","slug":"Golang","permalink":"https://hqd8080.github.io/categories/Golang/"}],"tags":[{"name":"golang","slug":"golang","permalink":"https://hqd8080.github.io/tags/golang/"}]},{"title":"Go语言的交叉编译","slug":"golang/go-gobuild","date":"2020-05-14T12:49:40.000Z","updated":"2022-02-17T09:21:34.008Z","comments":true,"path":"2020/05/14/golang/go-gobuild/","link":"","permalink":"https://hqd8080.github.io/2020/05/14/golang/go-gobuild/","excerpt":"","text":"Go语言的交叉编译在不同的系统打包编译的命令 12#-o：指定编译后的二进制包名称GOOS=linux GOARCH=amd64 go build -o app main.go 123#编译windows的exe文件#亲测有效，自己的开发本本是macOSCGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o test.exe main.go","categories":[{"name":"Golang","slug":"Golang","permalink":"https://hqd8080.github.io/categories/Golang/"}],"tags":[{"name":"golang","slug":"golang","permalink":"https://hqd8080.github.io/tags/golang/"}]},{"title":"Go语言生产者和消费者模式","slug":"golang/go-producer-consumer","date":"2020-01-02T03:17:10.000Z","updated":"2022-02-17T09:21:33.987Z","comments":true,"path":"2020/01/02/golang/go-producer-consumer/","link":"","permalink":"https://hqd8080.github.io/2020/01/02/golang/go-producer-consumer/","excerpt":"","text":"Go语言使用chan实现生产者和消费者代码12345678910111213141516171819202122232425262728293031package mainimport &quot;fmt&quot;// 消费者func consumer(data chan int, done chan bool) &#123; // 接收数据，直到通道被关闭 for v := range data &#123; fmt.Println(&quot;recv:&quot;, v) &#125; // 通知main消费结束 done &lt;- true&#125;// 生产者func producer(data chan int) &#123; for i := 0; i &lt; 4; i++ &#123; // 发送数据 data &lt;- i &#125; // 生产结束，关闭通道 close(data)&#125;func main() &#123; done := make(chan bool) // 用于接收消费者结束信号 data := make(chan int) // 数据管道 go consumer(data, done) // 启动消费者 go producer(data) // 启动生产者 &lt;-done // 阻塞，直到消费者发回结束信号&#125; 1234recv: 0recv: 1recv: 2recv: 3","categories":[{"name":"Golang","slug":"Golang","permalink":"https://hqd8080.github.io/categories/Golang/"}],"tags":[{"name":"golang","slug":"golang","permalink":"https://hqd8080.github.io/tags/golang/"}]}],"categories":[{"name":"Golang","slug":"Golang","permalink":"https://hqd8080.github.io/categories/Golang/"},{"name":"Docker","slug":"Docker","permalink":"https://hqd8080.github.io/categories/Docker/"},{"name":"Nginx","slug":"Nginx","permalink":"https://hqd8080.github.io/categories/Nginx/"},{"name":"gRPC","slug":"gRPC","permalink":"https://hqd8080.github.io/categories/gRPC/"},{"name":"Linux","slug":"Linux","permalink":"https://hqd8080.github.io/categories/Linux/"},{"name":"Git","slug":"Git","permalink":"https://hqd8080.github.io/categories/Git/"},{"name":"微服务","slug":"微服务","permalink":"https://hqd8080.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Redis","slug":"Redis","permalink":"https://hqd8080.github.io/categories/Redis/"}],"tags":[{"name":"golang","slug":"golang","permalink":"https://hqd8080.github.io/tags/golang/"},{"name":"GORM","slug":"GORM","permalink":"https://hqd8080.github.io/tags/GORM/"},{"name":"docker","slug":"docker","permalink":"https://hqd8080.github.io/tags/docker/"},{"name":"redis","slug":"redis","permalink":"https://hqd8080.github.io/tags/redis/"},{"name":"Nginx","slug":"Nginx","permalink":"https://hqd8080.github.io/tags/Nginx/"},{"name":"gRPC","slug":"gRPC","permalink":"https://hqd8080.github.io/tags/gRPC/"},{"name":"linux","slug":"linux","permalink":"https://hqd8080.github.io/tags/linux/"},{"name":"MySQL","slug":"MySQL","permalink":"https://hqd8080.github.io/tags/MySQL/"},{"name":"webSocket","slug":"webSocket","permalink":"https://hqd8080.github.io/tags/webSocket/"},{"name":"git","slug":"git","permalink":"https://hqd8080.github.io/tags/git/"},{"name":"微服务","slug":"微服务","permalink":"https://hqd8080.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"microservice","slug":"microservice","permalink":"https://hqd8080.github.io/tags/microservice/"}]}